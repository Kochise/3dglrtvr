<html>//______________________________________________________________
#include <windows.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <math.h>

//______________________________________________________________
LRESULT CALLBACK dispatcher(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
void init();
void render_scene();
void windmill(int depth, float angle);

//______________________________________________________________
const	float	PI	= 3.141592653589793238462643383279502884197169399375105820974944f;
const	float	r	= 10.0f;
const	float	t	= 2.0f;

//______________________________________________________________
HINSTANCE	hInstance;
HWND		hWnd;
HDC		hDC;
HGLRC		hRC;
float		rotatex = 45.0f;
float		rotatey =  0.0f;
float		distance= 15.0f;
float		spin	= 20.0f;
int		cx;
int		cy;
int		ox;
int		oy;

float	c(float t) { return float(cos(t/180.0*PI)); }
float	s(float t) { return float(sin(t/180.0*PI)); }

static	float	vertices[] = {
	      0.0f,       0.0f, 3.0f,	//  0
	    c( 30),     s( 30), 2.0f,	//  1
	    c(150),     s(150), 2.0f,	//  2
	    c( 30),     s( 30), 1.0f,	//  3
	    c(150),     s(150), 1.0f,	//  4
	    c( 30),     s( 30), 0.0f,	//  5
	    c(150),     s(150), 0.0f,	//  6
	r*c( 90-t), r*s( 90-t), 2.0f,	//  7
	r*c( 90+t), r*s( 90+t), 2.0f,	//  8
	r*c( 90-t), r*s( 90-t), 1.0f,	//  9
	r*c( 90+t), r*s( 90+t), 1.0f,	// 10
	r*c( 90+t), r*s( 90+t), 1.0f,	// 11
	      0.0f,       0.0f, 0.0f	// 12
};

static	float	normals[13*3];

static	unsigned char	indices[] = {
	0,  1,  2,
	6,  5, 12,
	2,  1,  7,  8,
	4,  2,  8, 10,
	3,  4, 10,  9,
	1,  3,  9,  7,
	8,  7,  9, 11,
	4,  3,  5,  6
};

//______________________________________________________________
void 
create
(
	HWND hWnd
)
{
	PIXELFORMATDESCRIPTOR	pfd;
	pfd.nSize		= sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion		= 1;
	pfd.dwFlags		= PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW | PFD_DOUBLEBUFFER;
	pfd.iPixelType		= PFD_TYPE_RGBA;
	pfd.cColorBits		= 24;
	pfd.cRedBits		= 0;
	pfd.cRedShift		= 0;
	pfd.cGreenBits		= 0;
	pfd.cGreenShift		= 0;
	pfd.cBlueBits		= 0;
	pfd.cBlueShift		= 0;
	pfd.cAlphaBits		= 0;
	pfd.cAlphaShift		= 0;
	pfd.cAccumBits		= 0;
	pfd.cAccumRedBits	= 0;
	pfd.cAccumGreenBits	= 0;
	pfd.cAccumBlueBits	= 0;
	pfd.cAccumAlphaBits	= 0;
	pfd.cDepthBits		= 24;
	pfd.cStencilBits	= 0;
	pfd.cAuxBuffers		= 0;
	pfd.iLayerType		= 0;
	pfd.bReserved		= 0;
	pfd.dwLayerMask		= 0;
	pfd.dwVisibleMask	= 0;
	pfd.dwDamageMask	= 0;

	hDC = GetDC(hWnd);
	int pf = ChoosePixelFormat(hDC, &pfd);
	DescribePixelFormat(hDC, pf, sizeof(PIXELFORMATDESCRIPTOR), &pfd);
	SetPixelFormat(hDC, pf, &pfd);
	hRC = wglCreateContext(hDC);
	wglMakeCurrent(hDC, hRC);

	return;
}

//______________________________________________________________
void 
destroy
()
{
	wglMakeCurrent(NULL, NULL);
	wglDeleteContext(hRC);
	ReleaseDC(hWnd, hDC);
	DestroyWindow(hWnd);
	UnregisterClass("OpenGL", hInstance);
	return;
}

//______________________________________________________________
int WINAPI 
WinMain
(
	HINSTANCE	hInstance,	
	HINSTANCE	hPrvInstance,	
	LPSTR		lpCmdLine, 
	int		nCmdShow
)
{
	WNDCLASS	wc;
	wc.style	= CS_OWNDC | CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc	= dispatcher;
	wc.cbClsExtra	= 0;
	wc.cbWndExtra	= 0;
	wc.hInstance	= hInstance;
	wc.hIcon	= NULL;
	wc.hCursor	= LoadCursor(NULL, IDC_CROSS);
	wc.hbrBackground= NULL;
	wc.lpszMenuName	= NULL;
	wc.lpszClassName= "OpenGL";
	RegisterClass(&wc);

	hWnd = CreateWindow(
		"OpenGL",
		"Windmill by Bandi",
		WS_OVERLAPPEDWINDOW | 
		WS_VISIBLE | 
		WS_CLIPCHILDREN | 
		WS_CLIPSIBLINGS,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		400,
		300,
		NULL,
		NULL,
		hInstance,
		NULL
	);

	ShowWindow(hWnd, nCmdShow);

	init();

	MSG	msg;
	for(;;) {
		while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
			if (msg.message == WM_QUIT) {
				return msg.wParam;
			}
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		render_scene();
		SwapBuffers(hDC);
	}

}

//______________________________________________________________
void 
set
(
	unsigned char index, float* v
)
{ 
	int i = index*3;

	normals[i+0] = v[0];
	normals[i+1] = v[1];
	normals[i+2] = v[2];
}

//______________________________________________________________
void 
sub
(
	unsigned char index_a, 
	unsigned char index_b, 
	float* v
)
{ 
	int a = index_a*3;
	int b = index_b*3;

	v[0] = vertices[a+0] - vertices[b+0];
	v[1] = vertices[a+1] - vertices[b+1];
	v[2] = vertices[a+2] - vertices[b+2];
}

//______________________________________________________________
void 
xprod
(
	float*	a, 
	float*	b, 
	float*	n
) 
{
	n[0] = a[1]*b[2] - a[2]*b[1];
	n[1] = a[2]*b[0] - a[0]*b[2];
	n[2] = a[0]*b[1] - a[1]*b[0]; 
}

//______________________________________________________________
void 
normalize
(
	float*	n
) 
{
	float l = (float)sqrt(n[0]*n[0] + n[1]*n[1] + n[2]*n[2]);

	n[0] /= l;
	n[1] /= l;
	n[2] /= l;
}

//______________________________________________________________
void
calculate_normals
()
{
	float	a[3];
	float	b[3];
	float	n[3];

	sub(indices[2], indices[1], a);
	sub(indices[0], indices[1], b);
	xprod(a, b, n);
	normalize(n);
	set(indices[2], n);

	sub(indices[4], indices[3], a);
	sub(indices[5], indices[3], b);
	xprod(a, b, n);
	normalize(n);
	set(indices[5], n);

	for (int i=0; i<6; i++) {
		int j = 6+i*4;
		sub(indices[j+1], indices[j+0], a);
		sub(indices[j+3], indices[j+0], b);
		xprod(a, b, n);
		normalize(n);
		set(indices[j+3], n);
	}
}

//______________________________________________________________
void 
init
()
{
	float	light_pos[] =	{ 0.0f, 0.0f, 1.0f, 0.0f};
	float	light_Ka[] =	{ 0.2f, 0.2f, 0.2f, 1.0f};
	float	light_Kd[] =	{ 0.8f, 0.8f, 0.8f, 1.0f};
	float	material_Ka[] =	{ 0.6f, 0.6f, 0.6f, 1.0f};

	calculate_normals();

	glClearColor(0, 0, 0, 0);
	glShadeModel(GL_FLAT);
	glEnable(GL_CULL_FACE);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glLightfv(GL_LIGHT0, GL_POSITION, light_pos);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light_Ka);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_Kd);
	glMaterialfv(GL_FRONT, GL_AMBIENT, material_Ka);
	glColorMaterial(GL_FRONT, GL_DIFFUSE);

	glEnableClientState(GL_NORMAL_ARRAY);
	glEnableClientState(GL_VERTEX_ARRAY);
	glNormalPointer(GL_FLOAT, 0, normals);
	glVertexPointer(3, GL_FLOAT, 0, vertices);

	return;
}

//______________________________________________________________
void 
render_scene
()
{
	static	LARGE_INTEGER freq;
	static	LARGE_INTEGER time;
	static	LARGE_INTEGER otime;
	static	float angle	= 0.0f;

	QueryPerformanceFrequency(&freq);
	QueryPerformanceCounter(&time);
	float dt=(float)(time.QuadPart-otime.QuadPart)/freq.QuadPart;
	otime = time;
	angle += dt*spin;

	if (distance < 4.0f)	distance = 4.0f;
	if (distance > 40.0f)	distance = 40.0f;
	if (rotatey < -60.0f)	rotatey	= -60.0f;
	if (rotatey > 60.0f)	rotatey	= 60.0f;

	float	y = distance*s(rotatey);
	float	t = distance*c(rotatey);
	float	x = t*c(rotatex);
	float	z = t*s(rotatex);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(x, y, z, 0, 0, 1, 0, 1, 0);
	windmill(4, angle);

	return;
}

//______________________________________________________________
void 
windmill
(
	int	depth, 
	float	angle
)
{
	if (!depth) return;

	glRotatef(angle, 0, 0, 1);
	for (int i=0; i<3; i++) {
		glColor3f(0.8f, 0.5f, 0.4f);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_BYTE, indices);
		glColor3f(1.0f-depth*0.2f, 1.0f-depth*0.2f, 1.0f-depth*0.1f);
		glDrawElements(GL_QUADS, 24, GL_UNSIGNED_BYTE, indices+6);

		glPushMatrix();
		glTranslatef(0, 5, 2);
		glScalef(0.4f, 0.4f, 0.4f);
		windmill(depth-1, -2*angle);
		glPopMatrix();
		glRotatef(120, 0, 0, 1);
	}
	return;
}

//______________________________________________________________
LRESULT CALLBACK 
dispatcher
(
	HWND	hWnd,
	UINT	uMsg,
	WPARAM	wParam,
	LPARAM	lParam
)
{
	switch (uMsg) {

	case WM_CREATE:
		create(hWnd);
		break;

	case WM_CLOSE:
		destroy();
		break;

	case WM_DESTROY:
		PostQuitMessage(0);
		break;

	case WM_SIZE:
		if (hWnd) {
			RECT	rect;

			GetClientRect(hWnd, &rect);

			int width = rect.right - rect.left;
			int height = rect.bottom - rect.top;
	
			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();
			gluPerspective(45, (float)width/height, 0.01f, 50.0f);
			glViewport(0, 0, width, height);
		}
		break;

	case WM_MOUSEMOVE:
		ox = LOWORD(lParam);
		oy = HIWORD(lParam);
		switch (wParam) {
		case MK_LBUTTON:
			rotatex += (ox - cx) / 2.0f;
			rotatey += (oy - cy) / 2.0f;
			break;
		case MK_RBUTTON: 
			distance += (oy - cy) / 20.0f;
			break;

		}
		cx = ox;
		cy = oy;
		break;

	case WM_CHAR:
		switch (wParam) {
		case VK_ESCAPE: destroy(); break;
		case '=':	spin += 5.0f; break;
		case '-':	spin -= 5.0f; break;
		}
		break;
	}

	return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

//______________________________________________________________
