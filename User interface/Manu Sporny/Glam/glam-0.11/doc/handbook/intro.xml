<chapter>
  <title>The GLAM library (libglam)</title>

  <sect1>
    <title>Introduction</title>
    <para>
      The GLAM toolkit is an OpenGL-based cross platform user interface toolkit
      for creating 2D or 3D user interfaces. Its main purpose is to provide the
      underlying framework for a user interface, leaving the application
      specific look, feel and behavior to the developer's discretion. GLAM is
      about user-interface form following function. In other words, the look
      and feel of the user interface should follow the purpose it is trying to
      achieve. 
    </para>

    <para>
      The GLAM toolkit was developed to fill a need for a very extensible
      user-interface toolkit for OpenGL.
    </para>

    <para>
      There are several user-interface toolkits available for OpenGL at
      the moment (2003). Among these are:
    </para>
    <variablelist>
      <title>OpenGL user interface toolkits</title>
      <varlistentry>
	<term>GLUI</term>
	<listitem>
	  <para>
	    An excellent 2D/3D hybrid UI toolkit that largely mimics the
	    visual appearance and behavior of Windows 2000. Ideal for
	    creating very portable 2D interface controls with 3D visualization
	    "portholes" in OpenGL. 
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>GLOW</term>
	<listitem>
	  <para>
	    A more simplistic OpenGL UI toolkit that allows for 2D/3D hybrid
	    interface controls. The widgets largely borrow their style from
	    SGI's ?OpenWindows? interface. GLOW's main purpose is very similar
	    to GLUI's except that it has not been updated since October 2000.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      The main weakness in both toolkits is the lack of extensibility and the
      lack of 3D UI support. Each toolkit assumes that the user interface will
      only consist of 2D widgets and text. Regrettably, 3D user interfaces are
      rarely a 2D affair. It is quite often that 3D input is required to
      select an object in 3 space. Visualization at it's core is about the
      visualization, not the user interface. A user interface should meld
      itself around the data that is being visualized, form should follow
      function.
    </para>
    <para>
      It is very important that developers realize that GLAM is a
      meta-toolkit. It does not define a final look and feel for the
      interface, rather it provides a framework for a very flexible UI. It is
      up to the developer to specify a component's graphical qualities as
      well as what animation occurs on a keyboard event, or mouse-over.
    </para>
  </sect1>

  <sect1>
    <title>Features</title>
    <itemizedlist>
      <listitem>
	<para>
	  Support for animation and smooth transitions/movement for all user
	  interface components based on B-spline animation techniques for
	  paths and acceleration.
	</para>
      </listitem>

      <listitem>
	<para>
	  Fully customizable look and feel depending on the developer's
	  visual goals 
	</para>
      </listitem>

      <listitem>
	<para>
	  Support for SVG and bitmap images
	</para>
      </listitem>

      <listitem>
	<para>
	  Support for decorations over visual objects (highlighter marks,
	  red circles drawn around key objects, "of-interest" reticles,
	  drop-shadows, etc)
	</para>
      </listitem>

      <listitem>
	<para>
	  Primitive layout containers (panels, tabbed panes, dialogs, wizards,
	  etc)
	</para>
      </listitem>

      <listitem>
	<para>
	  Robust keyboard and mouse event input coupled with advanced
	  animation triggers
	</para>
      </listitem>

      <listitem>
	<para>
	  Ability to draw user interface components in both 2d and 3d
	</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>GLAM History</title>
    <para>
      GLAM was created under contract by xRhino, Inc for Advanced Simulation
      Technology, Inc (ASTi) during the first part of 2003. ASTi required a
      user interface that provided an exciting user experience for their
      visualization application via complex animation and interaction
      techniques. The name follows the libraries function, to GLAMorize the
      user interface, or to make the UI more appealing to the user. The name
      encapsulates many different techniques that GLAM uses, namely complex
      animation, advanced support of scalable graphics, support for a
      multitude of UI techniques and flexible rendering functionality.  
    </para>

    <para>
      GLAM really stands for OpenGL American Mother, a moniker jokingly
      created by Gray Carper as the code-name for the project. It made us
      laugh, so the code-name stuck... we don't quite know what it means.
      Perhaps a patriotic homage to the statue of liberty? Probably not.
    </para>
  </sect1>

  <sect1>
    <title>GLAM Designers and Programmers</title>
    <para>
      The initial design and implementation of GLAM was concieved and
      executed by Gray Carper, Chris Glasnapp, Manu Sporny, and Jonathan
      Turner. 
    </para>

    <para>
      Further design and architecture reconstruction was executed by Mike
      Johnson and Dave Longley.
    </para>

    <para>
      GLAM Architects:
      <itemizedlist>
	<listitem>
	  <para>
	    Gray Carper
	  </para>
	  <para>
	    Gray was responsible for the base design, all the original font 
	    support and various UI primitives.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Chris Glasnapp
	  </para>
	  <para>
	    Chris extended GLAM by providing SVG support via the Sugar library
	    as well as creating several very useful components.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Mike Johnson
	  </para>
	  <para>
	    Mike helped refurbish and reconstruct the architecture of GLAM, 
	    and created many of the widgets for GLAM, including the table, 
	    menus, scrollable area, etc.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Dave Longley
	  </para>
	  <para>
	    Dave was the chief engineer for GLAM's new action/listener 
	    architecture. In addition, he helped fix many of the old widgets,
	    created new widgets, and wrestled OGLFT to the ground and beat 
	    the pulp out of it.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Manu Sporny
	  </para>
	  <para>
	    Manu was the initial designer and engineer of GLAM, and continues 
	    work on the core design as well as implementation of UI widgets, 
	    the event model, and animation control.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Jonathan Turner
	  </para>
	  <para>
	    Jonathan is credited with the early work on the UI concepts and 
	    the design document as well as the base implementation of Sugar.
	  </para>
	</listitem>
      </itemizedlist>
    </para>

    <para>
      GLAM Handbook Authors
      <itemizedlist>
	<listitem>
	  <para>
	    Mike Johnson
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Dave Longley
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Manu Sporny
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    
  </sect1>
  
</chapter>