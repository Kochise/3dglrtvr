/*
 * Copyright (c) 2002-2004, xRhino, Inc.
 *
 * This library is free software; you can redistribute and/or modify
 * it under the terms of the dual license distributed with this source
 * package (a combined Trolltech QPL/GPL-compatible license)
 *
 * Under this dual license scheme, a separate license is available for use of 
 * this code with a proprietary (closed) system. For more information on the 
 * license, please see the LICENSE file distributed with this source package.
 */
#ifndef GREXPANDERTOOLBAR_H
#define GREXPANDERTOOLBAR_H

#include <glam/GmContainer.h>
#include <glam/GmButtonListener.h>
#include <glam/GmSelectionListener.h>
#include <glamrock/GrTypes.h>

/**
 * A toolbar that expands and contracts.
 */
class GrExpanderToolbar : public GmContainer, public GmButtonListener
{
 protected:
   /**
    * The current state of this widget.
    */
   GrTypes::WidgetState mWidgetState;

   /**
    * The vector of listeners that listen to this component.
    */
   vector<GmSelectionListener*> mSelectionListeners;
   
   /**
    * Fires the appropriate selection action to all listeners.
    *
    * @param action the action to pass to the listeners
    */
   virtual void fireSelection(GmSelectionAction* action);

   /**
    * Fires the appropriate selection action to all listeners.
    *
    * @param action the action to pass to the listeners
    */
   virtual void fireDeselection(GmSelectionAction* action);

   /**
    * Border width of widget.
    */
   float mBorderWidth;

   /**
    * How much the expander panel should expand width-wise.
    */
   float mExpandWidth;

   /**
    * The fillet size of all the outer corners of the widget.
    */
   float mFilletSize;

 public:
   /**
    * Standard constructor
    */
   GrExpanderToolbar();

   /**
    * Virtual destructor
    */
   virtual ~GrExpanderToolbar();

   /**
    * Adds a selection listener to this group.
    *
    * @param sl a selection listener that will listen to this group.
    */
   virtual void addSelectionListener(GmSelectionListener* sl);

   /**
    * Removes a selection listener from this group.
    *
    * @param sl the selection listener to remove.
    * @return true if the listener was removed, false if not.
    */
   virtual bool removeSelectionListener(GmSelectionListener* sl);

   /**
    * Repositions and resizes this component based on parameters
    * passed into the method. These parameters are usually passed in
    * by the parent class.
    *
    * @param minX the starting X position of the constraint volume
    * @param minY the starting Y position of the constraint volume
    * @param minZ the starting Z position of the constraint volume
    * @param width the width of the constraint volume
    * @param height the height of the constraint volume
    * @param depth the depth of the constraint volume
    */
   virtual void layoutInGLVolume(float minX, float minY, float minZ,
                                 float width, float height, float depth);
   
   /**
    * Event processing function to process a mouse release event.
    *
    * @param event the mouse release event for this object to process
    */
   virtual void mouseReleaseEvent(GmEvent* event);

   /**
    * Adds a button to this toolbar.
    *
    * @param buttonText The text that will go on the button.
    * @param buttonListener The button listener used for events
    *                       generated by this button.
    * @param token The widget token for this button.
    */
   virtual void addButton(string buttonText,
                          GmButtonListener* buttonListener,
                          WidgetIDType token);
   
   /**
    * Adds a button to this toolbar.
    *
    * @param pressedGraphic The filename of the icon to use when the
    *                       button is depressed.
    * @param unpressedGraphic The filename of the icon to use when the
    *                         button is not depressed.
    * @param buttonListener The button listener used for events
    *                       generated by this button.
    * @param token The widget token for this button.
    */
   virtual void addButton(string pressedGraphic,
                          string unpressedGraphic,
                          GmButtonListener* buttonListener,
                          WidgetIDType token);
   
   /**
    * Adds a button to this toolbar.
    *
    * @param pressedGraphic The filename of the icon to use when the
    *                       button is depressed.
    * @param unpressedGraphic The filename of the icon to use when the
    *                         button is not depressed.
    * @param buttonText The text that will go on the button.
    * @param buttonListener The button listener used for events
    *                       generated by this button.
    * @param token The widget token for this button.
    */
   virtual void addButton(string pressedGraphic,
                          string unpressedGraphic,
                          string buttonText,
                          GmButtonListener* buttonListener,
                          WidgetIDType token);

   /**
    * Contracts the toolbar.
    */
   virtual void contract();

   /**
    * Expands the toolbar.
    */
   virtual void expand();   

   /**
    * Called whenever an button in this toolbar is pressed.
    *
    * @param action the button action involved in the press.
    */
   virtual void buttonPressed(GmButtonAction* action);

   
 protected:
   /**
    * Renders this dialog to a 2D image buffer.
    *
    * @param renderOptions the render options to use when rendering
    *                      the dialog.
    */
   virtual void render2d(GmTypes::RenderOptionType renderOptions);

   /**
    * Renders this dialog to a selection buffer.
    *
    * @param renderOptions the render options to use when rendering
    *                      the dialog.
    */
   virtual void render2dSelect(GmTypes::RenderOptionType renderOptions);
};

#endif
