<chapter>
  <title>GLAM Architecture</title>

  <sect1>
    <title>Overview</title>

    <para>
      It is very important that developers realize that GLAM is a
      meta-toolkit. It does not define a final look and feel for the
      interface, rather it provides a framework for a very flexible UI.
      It is up to the developer to specify a component's graphical qualities
      as well as what animation occurs on a keyboard event, or mouse-over.
    </para>

    <para>
      GLAM provides most common user interface windowing toolkit functionality
      such as primitives, layout managers, mouse input, user events, and
      widget actions and a very flexible layout and navigation scheme. Its
      primary purpose is to enhance OpenGL visualization applications by closely
      melding the user interface with the visualization. Due to the varying
      nature of visualization applications, a design decision was made to make
      GLAM as light-weight and flexible as possible.
    </para>

    <para>
      GLAM also provides more advanced UI features such as integrated
      animation and complete visual scalability. It is vital for completely
      scalable visual interfaces to provide output resolution independent
      components. GLAM is 100% scalable, and should display on any visual
      device, be it 2 inches in size, or 10 meters in width. All GLAM
      components can be animated as well, empowering the developer with a
      very sophisticated toolkit in a fast, simple to implement package.
    </para>

    <para>
      The GLAM architecture is broken into several sub-systems, namely; core,
      decorators, primitives, user events, widget actions &amp; listeners,
      containers, and animation.
    </para>

    <variablelist>
      <title>GLAM architecture sub-systems</title>

      <varlistentry>
	<term>Core</term>

	<listitem>
	  <para>
	    The core subsystem defines all GLAM base classes, the core
	    subsystem is contained in the
	    <filename class='directory'>src/libglam/base</filename> directory.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Decorators</term>

	<listitem>
	  <para>
	    Decorators are used in GLAM to provide visual markers or
	    non-interactive components meant purely for ornamentation.
	    The decorator sub-system is contained in the
	    <filename class='directory'>src/libglam/decorators</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Primitives</term>

	<listitem>
	  <para>
	    The primitive sub-system contains all atomic user interface
	    components that GLAM supports. Buttons, labels, text fields,
	    text areas, bar meters, list items, menu items, hyperlinks and
	    sliders are all examples of GLAM primitives. The primitive
	    sub-system is contained in the
	    <filename class='directory'>src/libglam/primitives</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>User Events</term>

	<listitem>
	  <para>
	    The user event sub-system handles all user-based communication
            within GLAM. Events are used as a message passing mechanism between
            user input and other components. GLAM supports user events from
            input devices such as mouse and keyboard. The user event sub-system
            is contained in the
	    <filename class='directory'>src/libglam/event</filename> directory.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Widget Actions &amp; Listeners</term>

	<listitem>
	  <para>
	    The widget action &amp; listener sub-system handles all communication
	    that originates from widgets. This includes widget-to-widget and
	    widget-to-application interaction. The core classes for widget actions
	    and their respective listener interfaces are contained in the
	    <filename class='directory'>src/libglam/event</filename> directory.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Containers</term>

	<listitem>
	  <para>
	    The container sub-system supports robust grouping and organizing
	    of primitive GLAM widgets. Some supported container types include
	    menus, menu bars, scrollable panels, radio button
	    groups, tables, and dialogs. The container sub-system is
	    contained in the
	    <filename class='directory'>src/libglam/containers</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Animation</term>

	<listitem>
	  <para>
	    The animation sub-system handles all visual component translation,
	    rotation and scaling. Animation can occur on any event or as part
	    of a widgets idle render loop. GLAMs animation sub-system is
	    robust enough to provide most forms of traditional and next
	    generation animation capabilities. The animation sub-system is
	    contained in the
	    <filename class='directory'>src/libglam/animation</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>

    </variablelist>
  </sect1>

  <sect1>
    <title>Core Classes</title>

    <para>
      The core classes provide the base framework for all other GLAM classes.
      <variablelist>
	<title>Important core classes</title>

	<varlistentry>
	  <term>GmObject</term>

	  <listitem>
	    <para>
	      Every GLAM component that has the potential to interact with the
	      user derives from this class. Its single contribution is the
	      ability to allocate and de-allocate unique IDs for components in
	      the system. This ID can be used for a variety of uniqueness
	      tests and is used by default for the user interface object
	      picking code (ie: What object did the user just click on?).
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmDrawable</term>

	  <listitem>
	    <para>
	      Any component that will have a visual representation on screen
	      is derived from this class. The
	      <classname>GmDrawable</classname> class provides a variety of
	      size, color and position information to OpenGL and the layout
	      managers so that the component is represented accurately on
	      screen.
	    </para>

	    <para>
	      The <classname>GmDrawable</classname> class also contains the
	      definition for all possible 2D and 3D rendering methods. For
	      example, any drawable can have a 2D, 3D and 2D selection buffer
	      representation. It is these rendering methods that are
	      overloaded if developers want to give the component a particular
	      visual look.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmContainer</term>

	  <listitem>
	    <para>
	      The <classname>GmContainer</classname> class is the base class
	      for all primitive containers. Containers offer a method of
	      grouping and arranging most user interface components. They are
	      responsible for the logical, aesthetic layout of all their child
	      components. Examples of containers would be menus, list boxes,
	      panels, and dialog boxes.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmInteractiveWidget</term>

	  <listitem>
	    <para>
	      The <classname>GmInteractiveWidget</classname> class is the base
	      class for all GLAM components that will recieve any sort of
	      user event such as a mouse press or key press. It contains a variety
	      of methods to handle every sort of event that can occur in GLAM.
	      It is these user event handling methods that are overloaded if
	      developers want to give the component a particular behavior based
	      on user input.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmOptions</term>

	  <listitem>
	    <para>
	      The <classname>GmOptions</classname> singleton handles a slew of
	      variables that are read from a file on disk. These variables are
	      used to set the defaults for a GLAM application. Defaults such
	      as base color, border width, tooltip popup timeout, text
	      resolution and points size are query-able via the GmOptions
	      object.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmFileManager</term>

	  <listitem>
	    <para>
	      The <classname>GmFileManager</classname> singleton handles all
	      file access and is used mostly as an image and icon cache to prevent
	      textures being loaded more than once from disk.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmFontManager</term>

	  <listitem>
	    <para>
	      The <classname>GmFontManager</classname> is a wrapper factory
	      around the OGLFT library. Its primary purpose is to ease the
	      complexity in creating and managing scalable, TrueType fonts in
	      GLAM.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>
    </para>
  </sect1>

  <sect1>
    <title>Decorators</title>

    <para>
      The Decorator class' sole purpose is to provide visual markers or meant
      purely for ornamentation. Icons and target reticles are among
      the most commonly used decorators in a user interface. The GLAM toolkit
      provides both PNG and SVG icons. Of particular worth are SVG icons,
      which can be indefinitely scaled to any size. 
      <figure>
	<title>Examples of GLAM Decorators</title>

	<mediaobject>
	  <imageobject>
	    <imagedata fileref="figures/decorators.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>
    </para>

    <para>
      The most important aspect to decorators are their visual representation.
      To modify a decorators visual representation, a developer can sub-class
      the component and overload the various <function>render</function>
      methods.
    </para>
  </sect1>
  
  <sect1>
    <title>Primitives</title>

    <para>
      GLAM provides the primitives available in most popular UI toolkits;
      graphic buttons, sliders, text labels, progress indicators, check boxes,
      radio buttons, scrollbars, text fields, etc. All components by default
      have a very simplistic look and feel that can be overridden easily by
      the end developer. The most important feature of GLAM is that it
      provides a OpenSource, visually-independent framework for developers to
      use as a spring board for their own UI components.
      <figure>
	<title>Examples of GLAM Primitives</title>

	<mediaobject>
	  <imageobject>
	    <imagedata fileref="figures/primitives.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>
    </para>

    <para>
      Primitives have both a defined look and behavior. The look can be
      modified by sub-classing and overloading the various
      <function>render</function> methods. The behavior can be modified by
      sub-classing and overloading the various event handling methods
      outlined in the <classname>GmInteractiveWidget</classname> class.
    </para>
  </sect1>

  <sect1>
    <title>Event Handling</title>

    <para>
      GLAM's event handling architecture is built upon an essential dichotomy,
      namely the separation of user input from widget communication. Event
      handling in GLAM therefore consists of the following two different
      subsets: <glossterm linkend="user_events">User Events</glossterm> and
      <glossterm linkend="widget_actions_listeners">
	Widget Actions &amp; Listeners</glossterm>.
      <figure>
	<title>Simple Diagram of GLAM Event Handling</title>

	<mediaobject>
	  <imageobject>
	    <imagedata fileref="figures/eventhandling.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>
    </para>

    <sect2>
      <title>User Events</title>

      <para>
	In most windowing toolkits, there usually exists a master controller
	of some form or another. The UI toolkit assumes the responsibility of
	handling all user input. While this method provides a very
	straight-forward approach to application design, it does not fit well
	with most visualization-centric applications. 
      </para>

      <para>
	GLAM's event model utilizes a more free-form approach. It is up to the
	application to generate and send user events to the event distributor,
	which then sends them to the proper widget. The widget is then
	responsible for handling the event in an appropriate fashion. This
	approach allows for a much more flexible integration paradigm than the
	traditional "the application revolves around the UI toolkit". Rather,
	with GLAM "the UI toolkit revolves around the application".
      </para>

      <para>
	There are several important user event classes that the developer
	should be aware of, namely:
	<variablelist>
	  <title>Important event classes</title>

	  <varlistentry>
	    <term>GmEvent</term>

	    <listitem>
	      <para>
		The <classname>GmEvent</classname> class is the base class for
		all user events and encapsulates much of the information
		needed by events into a single object. Mouse and keyboard
		events are encapsulated into a single
		<classname>GmEvent</classname> object. These event objects are
		then passed around the GLAM architecture until they reach
		their destination. All events have a receiver ID to identify the
		target widget. If an event represents mouse input, the mouse's
		coordinates will be recorded in the event both as screen
		coordinates and as openGL units.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>GmEventDistributor</term>

	    <listitem>
	      <para>
		The <classname>GmEventDistributor</classname> singleton is
		responsible for distributing all developer generated events
		to their target components. The GLAM event distribution model
		is completely open ended, in that a developer can decide when
		and how to create user events and to which target that
		event gets delivered. 
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist> 
      </para>
    </sect2>
  
    <sect2>
      <title>Widget Actions &amp; Listeners</title>

      <para>
	The Actions and Listener interface provides a means for inter-widget
	communication. The event distribution architecture handles only
	external input events (directly from the user), so a robust internal
	action architecture was	created. Widgets can implement certain types
	of listening interfaces. Using those interfaces, they can register
	with other widgets to recieve actions. This allows widgets to 'talk'
	to each other.
      </para>

      <para>
	Another purpose for this architecture is highlighted through an
	understanding of the difference between, for example, a mouse button
	click (a user event) and a "button press." A button press is
	generally not as simple as a mouse click. A user may, for instance,
	click on a button, continue holding the mouse button, leave the button
	and return before releasing the mouse button again. This action is
	considered a "button press." Understanding who is responsible for
	handling this kind of behavior is where actions and listeners play
	their role.
      </para>

      <para>
	As can be seen from our previous example, it is the button widget that
	actually determines its own function, not a mouse click. The same is
	true for all other widgets in GLAM. With this in mind, the architecture
	for widget "action" handling was devised.
      </para>

      <para>
	In GLAM, user events are generated and assigned to certain widgets by
	the developer. The widget is then responsible for how it will handle
	the user event. In this manner, the function of a widget will determine
	what a widget is. For instance, the function of a button is the
	abstract "button press" action, as previously described. A button
	widget and how the user will interact with it is determined by its
	function. By virtue of this important design, the form of a widget
	follows its function.
      </para>

      <para>
	As user events are translated by widgets into the appropriate
	behavior, a more abstract communication layer is developed. The actions
	that widgets perform in response to a user event can be "listened" to
	by other widgets or classes. This is accomplished through the
	implementation of various listener interfaces. For each type of
	abstract widget action, a widget listener interface is available. In
	keeping with the previous button examples, button actions can be
	listened to by implementing a button listener.
      </para>

      <para>
	The developer is expected to extend the core set of action and
	listener classes provided in GLAM when necessary to accomplish the
	specific goals of his	application. Below are the base action and
	listener classes, as well as some core action &amp; listener classes
	and some widgets that support them.
      </para>

      <variablelist>
	<title>Base Action &amp; Listener in GLAM</title>

	<varlistentry>
	  <term>GmWidgetAction</term>

	  <listitem>
	    <para>
	      The <classname>GmWidgetAction</classname> class is the base
	      class for all widget actions.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmWidgetListener</term>

	  <listitem>
	    <para>
	      The <classname>GmWidgetListener</classname> class is the base
	      interface for all widget listeners.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <variablelist>
	<title>Examples of Core Actions &amp; Listeners in GLAM</title>

	<varlistentry>
	  <term>GmButtonAction</term>

	  <listitem>
	    <para>
	      The <classname>GmButtonAction</classname> class describes
	      a button action. A button widget generates a button action
	      when it is "pressed."
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmButtonListener</term>

	  <listitem>
	    <para>
	      The <classname>GmButtonListener</classname> class handles
	      <classname>GmButtonAction</classname>s.
	    </para>
	    <itemizedlist>
	      <title>Examples of supporting widgets</title>

	      <listitem>
		<para>
		  <classname>GmButton</classname>
		</para>
	      </listitem>

	      <listitem>
		<para>
		  <classname>GmCheckBox</classname>
		</para>
	      </listitem>

	      <listitem>
		<para>
		  <classname>GmRadioButton</classname>
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmFocusAction</term>

	  <listitem>
	    <para>
	      The <classname>GmFocusAction</classname> class describes
	      a focus action. A focusable widget generates a focus action
	      when a user event modifies its focus.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmFocusListener</term>

	  <listitem>
	    <para>
	      The <classname>GmFocusListener</classname> class handles
	      <classname>GmFocusAction</classname>s.
	    </para>
	    <itemizedlist>
	      <title>Examples of supporting widgets</title>

	      <listitem>
		<para>
		  All <classname>GmInteractiveWidget</classname>s
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmScalarAction</term>

	  <listitem>
	    <para>
	      The <classname>GmScalarAction</classname> class describes
	      a scalar action. A scalar widget generates a scalar action
	      when its value is changed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmScalarListener</term>

	  <listitem>
	    <para>
	      The <classname>GmScalarListener</classname> class handles
	      <classname>GmScalarAction</classname>s.
	    </para>
	    <itemizedlist>
	      <title>Examples of supporting widgets</title>

	      <listitem>
		<para>
		  <classname>GmBarMeter</classname>
		</para>
	      </listitem>

	      <listitem>
		<para>
		  <classname>GmScrollbar</classname>
		</para>
	      </listitem>

	      <listitem>
		<para>
		  <classname>GmSlider</classname>
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmSelectionAction</term>

	  <listitem>
	    <para>
	      The <classname>GmSelectionAction</classname> class describes
	      a selection action. A widget that supports selection generates
	      a selection action when one of its components is selected.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>GmSelectionListener</term>

	  <listitem>
	    <para>
	      The <classname>GmSelectionListener</classname> class handles
	      <classname>GmSelectionAction</classname>s.
	    </para>
	    <itemizedlist>
	      <title>Examples of supporting widgets</title>

	      <listitem>
		<para>
		  <classname>GmCheckBox</classname>
		</para>
	      </listitem>

	      <listitem>
		<para>
		  <classname>GmMenu</classname>
		</para>
	      </listitem>

	      <listitem>
		<para>
		  <classname>GmMenuBar</classname>
		</para>
	      </listitem>

	      <listitem>
		<para>
		  <classname>GmRadioButton</classname>
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>
  
  <sect1>
    <title>Containers</title>

    <para>
      A container's role in GLAM is to encapsulate other primitives and
      containers while providing a layout method for the sub-components.
      Examples of GLAM containers include: menus, dialogs, button bars,
      panels, tables, tabbed panels, and listboxes.
      <figure>
	<title>Examples of GLAM container classes</title>

	<mediaobject>
	  <imageobject>
	    <imagedata fileref="figures/containers.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>
    </para>
  </sect1>

  <sect1>
    <title>Animation</title>

    <para>
      The animation sub-system in GLAM was designed to allow every visual
      component to be animated in some way. Animation primitives were chosen
      to match with the core OpenGL manipulation primitives: translation,
      rotation and scaling. The sub-system utilizes multi-point lines and
      B-splines for animation control.
    </para>

    <para>
      <figure>
	<title>Basic animation supported by GLAM</title>

	<mediaobject>
	  <imageobject>
	    <imagedata fileref="figures/basicanimation.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>

      GLAM supports simple animation constructs such as translation, rotation
      and scaling. These animation constructs can be combined in a variety of
      ways to perform quite complicated motion and transformation animations.
      
      <figure>
	<title>Advanced animation supported by GLAM</title>

	<mediaobject>
	  <imageobject>
	    <imagedata fileref="figures/advancedanimation.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>
    </para>
  </sect1>
</chapter>
