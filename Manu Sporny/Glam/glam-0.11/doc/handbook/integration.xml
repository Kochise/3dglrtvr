<chapter>
  <title>Putting It All Together</title>

  <sect1>
    <title>Overview</title>

    <para>
      GLAM is based on openGL, which is a 3d environment graphics API. Since 
      all widgets were created using openGL commands to display them, it is 
      necessary to have some system for placing all widgets in an organized way.
    </para>

    <para>
      GLAM also allows widgets to be animated. GLAM widgets have animation 
      states, dynamic tooltips and extensive movement properties.
    </para>

    <para>
      However, with all these abilities come some limitations.
    </para>

    <variablelist>
      <title>GLAM Integration</title>

      <varlistentry>
	<term>Relative Geometries</term>

	<listitem>
	  <para>
	    Relative Geometries allow widgets to be layed out within the area 
	    of their parent widget.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <glossterm linkend="layout_managers">Layout Managers</glossterm>
	</term>

	<listitem>
	  <para>
	    Layout Managers create an organized way of laying out widgets 
	    within a container or parent widget.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Animation</term>
	
	<listitem>
	  <para>
	    Widgets can have several animation states, and are able to play 
	    through selected animations.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Tooltips</term>
	
	<listitem>
	  <para>
	    All Interactive Widgets have the ability to use tooltips. Their 
	    text content and hover time can be customized.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1>
    <title>Primitives and Containers: Arranging Your Interface</title>

    <sect2>
      <title>Relative Geometries &amp;
	<glossterm linkend="layout_managers">Layout Managers</glossterm>
      </title>

      <para>
	GLAM relies on relative geometries to set up the spatial relationships
	of most of its components. There are two calls to set up relative 
	geometries. One is the 4 parameter call which is simplified to work in
	2d, the other is a 6 parameter call which takes widget depth into 
	account and is used for 3d widgets.
      </para>

      <para>
	Since GLAM works in openGL, which is a 3 space environment, widgets can
	have problems with their depth and layering. A GLAM_LAYER has been 
	created to ease the development process. By ensuring child widgets are
	at least one GLAM_LAYER above their parent, rendering and selection 
	problems can be avoided.
      </para>

      <para>
	When a component is added to a container, there are several choices 
	available for how align the child to the parent based on the layout 
	manager that the container uses.
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    2d Layout
	  </para>

	  <para>
	    The 2d Layout Manager is often the default layout manager assigned
	    to a container because it is one of the easiest to work with. The 
	    relative geometries of the children must be set in order to work 
	    with the 2d layout manager. 2d Layout will assign its container 
	    children's absolute GL geometries based on the children's spatial 
	    relationships to the container's own position and size. The 2d 
	    Layout Manager is guarenteed to place all child widgets at least 
	    one GLAM_LAYER above the container.
	  </para>

	  <figure>
	    <title>2d Layout Manager</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="figures/2dLayout.png" format="PNG"/>
	      </imageobject>
	    </mediaobject>
	  </figure>

	  <para>
	    As shown in the figure, X1 and Y1 are the bottom left hand 
	    coordinate of the child object relative to the geometry of the 
	    parent container. X2 and Y2 are the top right corner of the child 
	    object. Using these two points, the 2d Layout Manager is able to 
	    calculate and set the absolute GL geometry of the child object 
	    based on its own absolute GL position and size.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Flow Layout
	  </para>

	  <para>
	    A Flow Layout attemps to align all components horizontally across 
	    the parent container's size, moving a component to the next row 
	    down only if it has insufficient space left to lay out the child. 
	    FlowLayout does NOT need or use the relative geometries of its 
	    children to lay them out, it will calculate the layout based on 
	    the children's GL Extents. The Flow Layout will place all children
	    at least one GLAM_LAYER above their parent.
	  </para>

	  <figure>
	    <title>Flow Layout Manager</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="figures/FlowLayout.png" format="PNG"/>
	      </imageobject>
	    </mediaobject>
	  </figure>

	  <para>
	    The Flow Layout shown above has placed Label 2 after Label 1 on 
	    the same line because there was horizontal space left for Label 2 
	    to fit. However, Label 3 was moved to the next line because it was
	    too large for the space that remained after Label 2 was placed. 
	    The Button was also moved to the next line after Label 3 because 
	    there was no horizontal room for the Button after Label 3.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Grid Layout
	  </para>

	  <para>
	    A Grid Layout allows the designer to create a gridwork of space, 
	    and add child components to individual cells of space. This allows
	    a more controlled spatial layout than a Flow Layout, while 
	    maintaining the organization. Grid Layout will place children at 
	    least one GLAM_LAYER above their parent.
	  </para>

	  <figure>
	    <title>Grid Layout Manager</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="figures/GridLayout.png" format="PNG"/>
	      </imageobject>
	    </mediaobject>
	  </figure>

	  <para>
	    The Grid Layout shown above has a 3 by 3 layout. Each of the 
	    buttons has been assigned a space to be layed out in.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    List Layout
	  </para>

	  <para>
	    A List Layout will lay the container's children out in a vertical 
	    list, one component on each horizontal row. List Layout does NOT 
	    require the relative geometries to be set, it will use the 
	    GL Extents of the child object to lay it out. List Layout will place
	    all children at least one GLAM_LAYER above their parent.
	  </para>

	  <figure>
	    <title>List Layout Manager</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="figures/ListLayout.png" format="PNG"/>
	      </imageobject>
	    </mediaobject>
	  </figure>
	</listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>LayoutInGLArea &amp; LayoutInGLVolume</title>

      <para>
	After the layout manager has been assigned and relative geometries of 
	children widgets have been set, all that is necessary is a call to 
	LayoutInGLArea or LayoutInGLVolume. The LayoutInGLArea is a 
	simplified, 5 parameter version designed to work for 2d widgets. 
	It will reposition and resize the component it is called on, and 
	will recursively set all children widget's GL position and size based 
	on their relative geometry and the layout manager. LayoutInGLVolume 
	is the 6 parameter version used for 3d widgets.
      </para>
    </sect2>

    <sect2>
      <title>Widget Packing &amp; GL Extents</title>

      <para>
	Due to the static size of fonts or the resizability of tables, it is 
	not possible to rely only on relative geometries to handle all sizing 
	and positioning. For instance, we want our fonts to be a consistent 
	size, and the table to be resizeable. The problem appears when you 
	need to know the size of an object in order to lay it out.
      </para>

      <para>
	GL Extents are the minimum size the widget needs in order to be layed 
	out correctly. Often this is dependent on a widget's text size. For 
	example, the GL Extents of a button with no text could be 0.0, 0.0 
	because the button would be able to be layed out in no space. However, 
	if it had text in it, the button would report its GL Extents as at 
	least the size of the text in GL units. This is because the minimum 
	size the button can be is now dependent on being able to read the text 
	on the button.
      </para>

      <para>
	The ScrollablePane uses its own relative geometry to determine the 
	viewport size, and GL Extents of its children to determine the area 
	that will be scrolled.

	<figure>
	  <title>A Scrollable Pane</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="figures/ScrollablePane.png" format="PNG" />
	    </imageobject>
	  </mediaobject>
	</figure>

	The Scrollable Pane shown above has three distinct areas. The first is
	the Black Outlined area, which is the Scrollable Pane's relative 
	geometry. Secondly is the Blue Outlined area, which is the content 
	area that is too big to fit within the bounds of the Scrollable Pane's
	relative geometry. Lastly we have the Red Outlined area, which is the 
	Scrollable Pane's viewport. This is the area in which the content will
	be shown. The content area it shows can be changed using the 
	scrollbars on the bottom and right sides.
      </para>

      <para>
	The Table is a special widget which utilizes GL Extents and the 
	Scrollable Pane to create a dynamically resizeable widget. The Table 
	holds an arbitrary number of Cells, each of which can be resized by 
	dragging the bottom right border corner. Once a Table Cell is resized,
	or if a new row/column is added, the Table resizes itself and the 
	other cells in that row and column. Since the table itself can grow 
	and shrink, it is necessary to put the table into a Scrollable Pane 
	(outlined above). That way the table will not overlap other widgets 
	in the same container.
      </para>
    </sect2>

  </sect1>

  <sect1>
    <title>A Closer Look at Event Distribution</title>

    <para>
      GLAM currently supports user input from both mouse and keyboard,
      but GLAM's extensible nature would easily allow for the developer
      to create new user events for handling other input devices.
    </para>

    <para>
      In GLAM, the developer is responsible for determining how and when
      user input is received from various input devices. When an application
      receives user input, the developer must create new user events that
      wrap the target widget's ID and other essential information about the
      event such as mouse coordinates or the key that was pressed on the
      keyboard.
    </para>

    <para>
      After the developer has created the event, the event distributor must be
      invoked to distribute the event to the appropriate widget (as previously
      defined by the developer). After the event has been distributed by the
      event distributor, GLAM takes over and sends the event to the target
      widget where it will be handled and various actions may be performed
      by the widget.
    </para>

  </sect1>

  <sect1>
    <title>How Actions and Listener Interfaces Work</title>

    <para>
      When a widget receives a user event, it will likely want to
      perform some kind of action that changes its appearance or
      behavior. After the user event has been handled, the widget
      may want to inform other components of the application that
      it has performed some kind of action in response to the user's
      input. A widget generates an "action," which is effectively
      a message that wraps the pertinent information describing
      the widget's performed action. The widget then passes this
      message to all of its listeners.
    </para>

    <para>
      If a component of an application desires to be notified
      of the various actions that widgets are performing, it must
      "listen" to them. In order to listen to a widget's actions,
      the component must implement the appropriate "listener." For instance,
      to get updates on a scrollbar's value, a component would implement
      the <classname>GmScalarListener</classname> interface. This
      interface includes the function <function>changeOccurred</function>.
      Whenever a scrollbar receives a user event from the mouse or
      keyboard that instructs it to scroll up or down, it will generate
      a <classname>GmScalarAction</classname> that encapsulates the
      new value of the scrollbar and the change from the old value.
      All of this information is wrapped by the action and passed to
      the <function>changeOccurred</function> function which is
      called by the scrollbar for all of its listeners.
    </para>

    <para>
      After implementing the appropriate interface, a component
      can begin listening to a widget by calling the correct
      <function>addListener</function>. To listen to a scrollbar,
      that function would be <function>addScalarListener</function>.
      After this function is called and the listener passed as its
      only parameter, any action performed by the widget will be
      sent to the listener. If a component wishes to stop listening
      to the widget, it may call the appropriate
      <function>removeListener</function> function.
    </para>
    
    <para>
      Once the action is received via the functions implemented
      for the appropriate interface, its data can be queried. All actions
      include the source of the action's ID so that the origin of the
      message can be determined. Other than this, each action includes
      the necessary data for its purpose, for instance, a
      <classname>GmSelectionAction</classname> includes a developer defined
      widget ID for the component that was selected in the selection action.
    </para>

    <para>
      Communication between widgets and other application components is
      easily understood and implemented using actions and listeners. Actions
      and listeners are also very extendible, so that communication is
      extremely flexible and customizable.
    </para>

  </sect1>

  <sect1>
    <title>Animation and the User Interface</title>

    <para>
      Widgets have the ability to be animated. Several of the benefits of this
      ability include animation states, interactive tooltips and widget 
      movement.
    </para>

    <sect2>
      <title>Widget Animation</title>

      <para>
	Widgets have the ability to be animated if they inherit from 
	GmAnimatedWidget. This class adds the ability to store animations for 
	appearing, vanishing, and idling. In addition, the class will store 
	the current animation, allowing the developer to switch between 
	animations using the setEventAnimation call.
      </para>

      <para>
	Once an animation has been set, the Animated Widget applies the 
	animation transforms. When the animation is complete, it uses the 
	callback function animationFinished to notify the widget which 
	animation has finished running.
      </para>
    </sect2>

    <sect2>
      <title>Tooltips</title>

      <para>
	Tooltips are available in any Interactive Widget. Once the mouse 
	enters the widget selection space, a tooltip hover counter begins. 
	Once the counter reaches a specified time, the tooltip is drawn at 
	the point where the mouse was detected entering the widget.
      </para>

      <para>
	The tool tip size and text content is configurable. Using 
	setToolTipText and getToolTipText, as well as setToolTipTextSize 
	and setToolTipEnabled. Using these functions, the developer can 
	utilize any number of tool tip configurations.
      </para>

      <para>
	Once a tool tip is configured, it can be drawn during a widget's 
	render2d call by using the member function render2dToolTip. This 
	function will handle the time check for hovering and the positioning 
	of the tool tip.
      </para>
    </sect2>

    <sect2>
      <title>Widget Movement</title>

      <para>
	Widgets can be moved using a combination of the getGLPosition and 
	setGLPosition calls. A widget translated by these calls moves all 
	child widgets with it. These calls are especially useful when you 
	have multiple containers with relative geometry layouts.
      </para>

      <para>
	Any number of transformations can be applied to a widget. Using the 
	openGL matrices, you can translate, scale and rotate a widget as 
	much as needed. However, movement applied to a widget through these 
	methods may result in undefined behavior, especially in a container 
	class widget with children.
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Limitations</title>

    <para>
      The maximum number of concurrently allocated objects in GLAM is 65536.
      The maximum number of static widget IDs is <command>SHORT_MAX</command>,
      and the maximum number of dynamic widget IDs is limited to the range
      <command>SHORT_MAX</command> to <command>INT_MAX</command>.
    </para>
  </sect1>

  <sect1>
    <title>Extending GLAM</title>

    <para>
      GLAM is written in Object-Oriented C++, using openGL for hardware 
      accelerated graphics display. Since GLAM is designed with polymorphism 
      and inheritence, it is very easy to extend, add and change widgets.
    </para>

    <para>
      To this end, it is possible to create an entirely new visual style for 
      all GLAM widgets simply by inheriting from GLAM widgets and overloading 
      their render styles. If more substantial changes are required, it is 
      possible to overload logic functions as well as create entirely new 
      behaviors.
    </para>

    <para>
      For example, if a new visual style was needed for a button a new class, 
      called MyButton, can inherit from GmPushButton. All Push Button 
      functionality is immediately inherited: text setting, sizing and 
      placement functionality; border sizing; button coloring; relative 
      geometry and layout functions; the 2d and selection rendering.
    </para>

    <para>
      MyButton can then overload the render2d function. Using the Push Button 
      data, it is possible to create a new visual style, perhaps with rounded 
      corners or an entirely different shape.
    </para>
  </sect1>
</chapter>
