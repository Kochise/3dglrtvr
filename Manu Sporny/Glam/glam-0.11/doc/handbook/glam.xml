 <chapter>
  <title>The GLAM library (libglam)</title>
  <para>
    The GLAM toolkit is an OpenGL-based cross platform user interface toolkit
    for creating 2D or 3D user interfaces. Its main purpose is to provide
    the underlying framework for a user interface, leaving the application
    specific look, feel and behavior to the developer's discretion. GLAM is
    about user-interface form following function. In other words, the look
    and feel of the user interface should follow the purpose it is trying to
    achieve.
  </para>
  <sect1>
    <title>Introduction</title>
    <para>
      The GLAM toolkit came about to fill a need for a very extensible
      user-interface toolkit for OpenGL.
    </para>
    <para>
      There are several user-interface toolkits available for OpenGL at the
      moment (2003):
    </para>
    <variablelist>
      <title>OpenGL user interface toolkits</title>
      <varlistentry>
	<anchor id="glui"/>
	<term>GLUI</term>
	<listitem>
	  <para>
	    An excellent 2D/3D hybrid UI toolkit that largely mimics the
	    visual appearance and behavior of Windows 2000. Ideal for
	    creating very portable 2D interface controls with 3D visualization
	    "portholes" in OpenGL. 
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<anchor id="glow"/>
	<term>GLOW</term>
	<listitem>
	  <para>
	    A more simplistic OpenGL UI toolkit that allows for 2D/3D hybrid
	    interface controls. The widgets largely borrow their style from
	    SGI's ?OpenWindows? interface. GLOW's main purpose is very
	    similar to GLUI's except that it has not been updated since
	    October 2000.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      The main weakness in both toolkits is the lack of extensibility and the
      lack of 3D UI support. Each toolkit assumes that the user interface will
      only consist of 2D widgets and text. Regrettably, 3D user interfaces are
      rarely a 2D affair. It is quite often that 3D input is required to
      select an object in 3 space. Visualization at it's core is about the
      visualization, not the user interface. A user interface should meld
      itself around the data that is being visualized, form should follow
      function.
    </para>
    <para>
      It is very important that developers realize that GLAM is a
      meta-toolkit. It does not define a final look and feel for the
      interface, rather it provides a framework for a very flexible UI. It is
      up to the developer to specify a component's graphical qualities as well
      as what animation occurs on a keyboard event, or mouse-over.
    </para>
  </sect1>
  <sect1>
    <title>Features</title>
    <itemizedlist>
      <listitem>
	<para>
	  Support for animation and smooth transitions/movement for all user
	  interface components based on B-spline animation techniques for
	  paths and acceleration
	</para>
      </listitem>
      <listitem>
	<para>
	  Fully customizable look and feel depending on the developer's visual
	  goals
	</para>
      </listitem>
      <listitem>
	<para>
	  Support for SVG and bitmap icons/images
	</para>
      </listitem>
      <listitem>
	<para>
	  Support for decorations over visual objects (highlighter marks, red
	  circles drawn around key objects, "of-interest" reticles,
	  drop-shadows, etc)
	</para>
      </listitem>
      <listitem>
	<para>
	  Primitive layout containers (panels, tabbed panes, dialogs,
	  wizards, etc)
	</para>
      </listitem>
      <listitem>
	<para>
	  Robust keyboard and mouse event input coupled with advanced
	  animation triggers
	</para>
      </listitem>
      <listitem>
	<para>
	  Ability to draw user interface components in both 2d and 3d
	</para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <title>GLAM History</title>
    <para>
      GLAM was created under contract by xRhino, Inc for Advanced Simulation
      Technology, Inc (ASTi) during the first part of 2003. ASTi required a
      user interface that provided an exciting user experience for their
      visualization application via complex animation and interaction
      techniques. The name follows the libraries function, to GLAMorize the
      user interface, or to make the UI more appealing to the user. The 
      ame encapsulates many different techniques that GLAM uses, namely
      complex animation, advanced support of scalable graphics, support for a
      multitude of UI techniques and flexible rendering functionality.  
    </para>
    <para>
      GLAM really stands for OpenGL American Mother, a moniker jokingly
      created by Gray Carper as the code-name for the project. It made us
      laugh, so the code-name stuck... we don't quite know what it means.
      Perhaps a patriotic homage to the statue of liberty? Probably not.
    </para>
  </sect1>
  <sect1>
    <title>GLAM Architecture</title>
    <para>
      It is very important that developers realize that GLAM is a
      meta-toolkit. It does not define a final look and feel for the
      interface, rather it provides a framework for a very flexible UI. It is
      up to the developer to specify a component's graphical qualities as
      well as what animation occurs on a keyboard event, or mouse-over.
    </para>
    <para>
      GLAM provides most common user interface windowing toolkit
      functionality such as primitives, layout managers, mouse input, user
      and component events and a very flexible layout and navigation scheme.
      Its primary purpose is to enhance OpenGL visualization applications by
      closely melding the user interface with the visualization. Due to the
      varying nature of visualization applications, a design decision was
      made to make GLAM as light-weight and flexible as possible.
    </para>
    <para>
      The GLAM architecture is broken into several sub-systems, namely; core,
      decorators, primitives, events, containers, and animation.
    </para>
    
    <variablelist>
      <title>GLAM architecture sub-systems</title>
      
      <varlistentry>
	<term>core</term>
	<listitem>
	  <para>
	    The core subsystem defines all GLAM base classes, the core
	    subsystem is contained in the
	    <filename class='directory'>src/libglam/base</filename> directory.
	  </para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term>decorators</term>
	<listitem>
	  <para>
	    Decorators are used in GLAM to provide visual markers or
	    non-interactive components meant purely for ornamentation. The
	    decorator sub-system is contained in the
	    <filename class='directory'>src/libglam/decorators</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term>primitives</term>
	<listitem>
	  <para>
	    The primitive sub-system contains all atomic user interface
	    components that GLAM supports. Buttons, labels, text fields, text
	    areas, bar meters, list items, menu items, hyperlinks and sliders
	    are all examples of GLAM primitives. The primitive sub-system is
	    contained in the
	    <filename class='directory'>src/libglam/primitives</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term>events</term>
	<listitem>
	  <para>
	    The event sub-system handles all user-based and widget-based
	    communication within GLAM. Events are used as a message passing
	    mechanism between all components. GLAM supports a variety of
	    events, such as mouse, keyboard, widget, and developer-defined
	    events.  The event sub-system is contained in the
	    <filename class='directory'>src/libglam/event</filename> directory.
	  </para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term>containers</term>
	<listitem>
	  <para>
	    The container sub-system supports robust grouping and organizing
	    of primitive GLAM widgets. Some supported container types include
	    menus, menu bars, expandable icon bars, list boxes, radio button
	    groups, tables, and dialogs. The container sub-system is contained
	    in the
	    <filename class='directory'>src/libglam/containers</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term>animation</term>
	<listitem>
	  <para>
	    The animation sub-system handles all visual component
	    translation, rotation and scaling. Animation can occur on any
	    event or as part of a widgets idle render loop. GLAMs animation
	    sub-system is robust enough to provide most forms of traditional
	    and next generation animation capabilities. The animation
	    sub-system is contained in the
	    <filename class='directory'>src/libglam/animation</filename>
	    directory.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    
    <sect2>
      <title>Core Classes</title>
      <para>
	Empty
      </para>
    </sect2>
    
    <sect2>
      <title>Decorators</title>
      <para>
	Empty
      </para>
    </sect2>
    
    <sect2>
      <title>Primitives</title>
      <para>
	GLAM provides the primitives available in most popular UI toolkits;
	buttons, sliders, text labels, text fields, menus, panels, radio
	button groups, etc. All components by default have a very simplistic
	look and feel that can be overridden easily by the end developer.
      </para>
    </sect2>
    <sect2>
      <title>Events</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>Containers</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>Animation</title>
      <para>
	The animation sub-system in GLAM was designed to allow every visual
	component to be animated in some way. Animation primitives were chosen
	to match with the core OpenGL manipulation primitives; translation,
	rotation and scaling. The sub-system utilizes multi-point lines and
	B-splines for animation control.
      </para>
      <figure>
	<title>Types of animation supported by GLAM</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="figures/animation.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Event Model</title>
      <para>
	In most windowing toolkits, there usually exists a master controller
	of some form or another. The UI toolkit assumes the responsibility of
	handling all user input. While this method provides a very
	straight-forward approach to application design, it does not fit well
	with most visualization-centric applications. 
      </para>
      <para>
	GLAM's event model utilizes a more free-form approach. All widgets
	must register themselves with an event distributor if they wish to
	receive events. It is up to the application to generate and send these
	events to the widgets via the event distributor. This approach allows
	for a much more flexible integration paradigm than the traditional
	"the world revolves around the UI toolkit". Rather, with GLAM "the UI
	toolkit revolves around the application".
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Putting it all together</title>
    <sect2>
      <title>Primitives and Containers: Arranging Your Interface</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>User Input and Feedback</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>A Closer Look at Event Distribution</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>Animation and the User Interface</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>Limitations</title>
      <para>
	Empty
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Downloading, Building and Installing GLAM</title>
    <sect2>
      <title>Downloading GLAM</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>Building GLAM from raw source</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>Installing GLAM from raw source</title>
      <para>
	Empty
      </para>
    </sect2>
    <sect2>
      <title>Building Debian Packages</title>
      <para>
	To build a Debian package of GLAM, you will want to perform the 
	following steps after downloading the source archive:
      </para>
      <para>
	<orderedlist>
	  <listitem>
	    <para>
	      <command>dpkg-source -x glam_&lt;version&gt;.dsc</command>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <command>cd glam-&lt;version&gt;</command>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <command>autoreconf</command>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <command>dpkg-buildpackage -us -uc -rfakeroot</command>
	    </para>
	  </listitem>
	</orderedlist>
      </para>
      <para>
	The rest of the build process is automated and will create Debian
	packages that will be placed above the 
	<filename>glam-&lt;version&gt;</filename> directory. You may install
	these Debian packages using the 
	<command>dpkg -i &lt;packagename&gt;</command> command.
      </para>
      <para>
	For more information on building Debian packages, please visit the 
	<ulink url="http://www.debian.org/doc/manuals/maint-guide/">
	  Debian's New Package Maintainers Guide
	</ulink>.
      </para>
    </sect2>
  </sect1>
 </chapter>
