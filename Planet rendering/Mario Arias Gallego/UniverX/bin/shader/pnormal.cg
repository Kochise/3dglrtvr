struct pixel_in {
	float4 position : POSITION;
	float4 color : COLOR0;
	float2 texCoords : TEXCOORD0;
	float3 vLightVector : TEXCOORD3;
};
	
struct pixel_out {
	float4 color: COLOR;
};

pixel_out main( pixel_in IN, uniform sampler2D baseTexture : TEXUNIT0,
			uniform sampler2D normalTexture : TEXUNIT1, 
			uniform float3 fLightDiffuseColor: COLOR1)
{
	pixel_out OUT;

	float3 vLightVector = normalize(IN.vLightVector);

	// Decompress vector ([0, 1] -> [-1, 1])
	float3 vNormal = 2.0f * (tex2D(normalTexture, IN.texCoords).rgb - 0.5f);
	vNormal.x = vNormal.x * 2;
	vNormal.y = vNormal.y * 2;
	vNormal = normalize(vNormal);
	
	// Calculate the diffuse component and store it as the final color in 'OUT.color'
	//OUT.color.rgb = fLightDiffuseColor * tex2D(baseTexture, IN.texCoords).rgb * saturate(dot(vLightVector, vNormal));
	OUT.color.rgb = tex2D(baseTexture, IN.texCoords).rgb * (saturate(dot(vLightVector, vNormal)*0.7)+0.3);

	//OUT.color.rgba = float4( tex2D(baseTexture, IN.texCoords).rgb, 1.0);
	//OUT.color.rgb = saturate(dot(vLightVector, vNormal));
	//OUT.color.rgb = vLightVector.rgb;
	//OUT.color.rgb = vNormal.rgb;
	//OUT.color.rgb = IN.color.rgb;
	OUT.color.a = 1.0;
	return OUT;
}

