struct appdata 
{
	float4 position : POSITION;
	float4 color	: COLOR0;
	float2 texCoords: TEXCOORD0;
	float3 vTangent : TEXCOORD1;
	float3 vBinormal: TEXCOORD2;
	float3 vNormal  : NORMAL0;
};

struct vfconn
{
	float4 HPos	: POSITION;
	float4 Col0	: COLOR0;
	float2 texCoords: TEXCOORD0;
	float3 vLightVector : TEXCOORD3;
};

vfconn main(appdata IN,	uniform float4x4 ModelViewProj, const uniform float3 vLightPosition)
{
	vfconn OUT;			// Variable to handle our output from the vertex
					// shader (goes to a fragment shader if available).

	// Set The Color To The Value Specified In IN.color
	OUT.Col0 = IN.color;

        // Transform the light vector from object space into tangent space
	float3x3 TBNMatrix = float3x3(IN.vTangent, IN.vBinormal, IN.vNormal);
	OUT.vLightVector.xyz = mul(TBNMatrix, vLightPosition);

	// Transform The Vertex Position Into Homogenous Clip-Space (Required)
	OUT.HPos = mul(ModelViewProj, IN.position);
	OUT.texCoords = IN.texCoords;

	//OUT.Col0.rgb = OUT.vLightVector.xyz*0.5+0.5;
	//OUT.Col0.rgb = IN.vNormal.xyz*0.5+0.5;
	//OUT.Col0.rgb = IN.vBinormal.xyz*0.5+0.5;
	//OUT.Col0.rgb = IN.vTangent.xyz*0.5+0.5;
	//OUT.Col0.rgb = vLightPosition.xyz*0.5+0.5;


	return OUT;
}
