/*
Copyright (c) 2007, 2008 Markus Trenkwalder

All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, 
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation 
  and/or other materials provided with the distribution.

* Neither the name of the library's copyright owner nor the names of its 
  contributors may be used to endorse or promote products derived from this 
  software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "scene3.h"

#include "SDL.h"
#include "SDL_image.h"
#include "renderer/geometry_processor.h"
#include "renderer/rasterizer_subdivaffine.h"
#include "renderer/span.h"
#include "vector_math.h"
#include "fixedpoint/fixed_func.h"
#include "democommon.h"

using namespace swr;

namespace {
	float vertex_data[] = {
		0.866025f, 0.500001f, 20.000000f, -0.520834f, 0.403883f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.707106f, 0.707107f, 20.000000f, -0.520834f, 0.362217f, 
		0.965926f, 0.258820f, 20.000000f, -0.520834f, 0.445550f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.866025f, 0.500001f, 20.000000f, -0.520834f, 0.403883f, 
		1.000000f, 0.000001f, 20.000000f, -0.520834f, 0.487216f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.965926f, 0.258820f, 20.000000f, -0.520834f, 0.445550f, 
		0.965926f, -0.258818f, 20.000000f, -0.520834f, 0.528883f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		1.000000f, 0.000001f, 20.000000f, -0.520834f, 0.487216f, 
		0.866026f, -0.499999f, 20.000000f, -0.520834f, 0.570550f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.965926f, -0.258818f, 20.000000f, -0.520834f, 0.528883f, 
		0.707107f, -0.707107f, 20.000000f, -0.520834f, 0.612216f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.866026f, -0.499999f, 20.000000f, -0.520834f, 0.570550f, 
		0.500000f, -0.866025f, 20.000000f, -0.520834f, 0.653883f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.707107f, -0.707107f, 20.000000f, -0.520834f, 0.612216f, 
		0.258819f, -0.965926f, 20.000000f, -0.520834f, 0.695549f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.500000f, -0.866025f, 20.000000f, -0.520834f, 0.653883f, 
		-0.000001f, -1.000000f, 20.000000f, -0.520834f, 0.737216f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.258819f, -0.965926f, 20.000000f, -0.520834f, 0.695549f, 
		-0.258820f, -0.965925f, 20.000000f, -0.520834f, 0.778883f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.000001f, -1.000000f, 20.000000f, -0.520834f, 0.737216f, 
		-0.500002f, -0.866024f, 20.000000f, -0.520834f, 0.820549f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.258820f, -0.965925f, 20.000000f, -0.520834f, 0.778883f, 
		-0.707108f, -0.707105f, 20.000000f, -0.520834f, 0.862216f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.500002f, -0.866024f, 20.000000f, -0.520834f, 0.820549f, 
		-0.866027f, -0.499998f, 20.000000f, -0.520834f, 0.903883f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.707108f, -0.707105f, 20.000000f, -0.520834f, 0.862216f, 
		-0.965927f, -0.258816f, 20.000000f, -0.520834f, 0.945550f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.866027f, -0.499998f, 20.000000f, -0.520834f, 0.903883f, 
		-1.000000f, 0.000004f, 20.000000f, -0.520834f, 0.987217f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.965927f, -0.258816f, 20.000000f, -0.520834f, 0.945550f, 
		-0.965925f, 0.258823f, 20.000000f, -0.520834f, 0.028883f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-1.000000f, 0.000004f, 20.000000f, -0.520834f, 0.987217f, 
		-0.866023f, 0.500004f, 20.000000f, -0.520834f, 0.070550f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.965925f, 0.258823f, 20.000000f, -0.520834f, 0.028883f, 
		-0.707103f, 0.707110f, 20.000000f, -0.520834f, 0.112217f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.866023f, 0.500004f, 20.000000f, -0.520834f, 0.070550f, 
		-0.499995f, 0.866028f, 20.000000f, -0.520834f, 0.153884f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.707103f, 0.707110f, 20.000000f, -0.520834f, 0.112217f, 
		-0.258814f, 0.965927f, 20.000000f, -0.520834f, 0.195551f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.499995f, 0.866028f, 20.000000f, -0.520834f, 0.153884f, 
		0.000006f, 1.000000f, 20.000000f, -0.520834f, 0.237218f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		-0.258814f, 0.965927f, 20.000000f, -0.520834f, 0.195551f, 
		0.258825f, 0.965924f, 20.000000f, -0.520834f, 0.278884f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.000006f, 1.000000f, 20.000000f, -0.520834f, 0.237218f, 
		0.500006f, 0.866022f, 20.000000f, -0.520834f, 0.320551f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.258825f, 0.965924f, 20.000000f, -0.520834f, 0.278884f, 
		0.707106f, 0.707107f, 20.000000f, -0.520834f, 0.362217f, 
		0.000001f, 0.000001f, 21.000000f, 1.979166f, 0.515194f, 
		0.500006f, 0.866022f, 20.000000f, -0.520834f, 0.320551f, 
		0.707107f, 0.707107f, -20.000000f, 1.821277f, 0.198274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.866025f, 0.500000f, -20.000000f, 1.821277f, 0.239940f, 
		0.866025f, 0.500000f, -20.000000f, 1.821277f, 0.239940f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.965926f, 0.258819f, -20.000000f, 1.821277f, 0.281607f, 
		0.965926f, 0.258819f, -20.000000f, 1.821277f, 0.281607f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		1.000000f, 0.000000f, -20.000000f, 1.821277f, 0.323274f, 
		1.000000f, 0.000000f, -20.000000f, 1.821277f, 0.323274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.965926f, -0.258819f, -20.000000f, 1.821277f, 0.364940f, 
		0.965926f, -0.258819f, -20.000000f, 1.821277f, 0.364940f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.866026f, -0.500000f, -20.000000f, 1.821277f, 0.406607f, 
		0.866026f, -0.500000f, -20.000000f, 1.821277f, 0.406607f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.707107f, -0.707107f, -20.000000f, 1.821277f, 0.448274f, 
		0.707107f, -0.707107f, -20.000000f, 1.821277f, 0.448274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		0.500000f, -0.866025f, -20.000000f, 1.821277f, 0.489941f, 
		0.500000f, -0.866025f, -20.000000f, 1.821277f, 0.489941f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		0.258819f, -0.965926f, -20.000000f, 1.821277f, 0.531608f, 
		0.258819f, -0.965926f, -20.000000f, 1.821277f, 0.531608f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		0.000000f, -1.000000f, -20.000000f, 1.821277f, 0.573274f, 
		0.000000f, -1.000000f, -20.000000f, 1.821277f, 0.573274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.258819f, -0.965926f, -20.000000f, 1.821277f, 0.614941f, 
		-0.258819f, -0.965926f, -20.000000f, 1.821277f, 0.614941f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.500000f, -0.866026f, -20.000000f, 1.821277f, 0.656608f, 
		-0.500000f, -0.866026f, -20.000000f, 1.821277f, 0.656608f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.707106f, -0.707107f, -20.000000f, 1.821277f, 0.698274f, 
		-0.707106f, -0.707107f, -20.000000f, 1.821277f, 0.698274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.866025f, -0.500000f, -20.000000f, 1.821277f, 0.739941f, 
		-0.866025f, -0.500000f, -20.000000f, 1.821277f, 0.739941f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.965926f, -0.258819f, -20.000000f, 1.821277f, 0.781608f, 
		-0.965926f, -0.258819f, -20.000000f, 1.821277f, 0.781608f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-1.000000f, 0.000000f, -20.000000f, 1.821277f, 0.823274f, 
		-1.000000f, 0.000000f, -20.000000f, 1.821277f, 0.823274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.965926f, 0.258819f, -20.000000f, 1.821277f, 0.864941f, 
		-0.965926f, 0.258819f, -20.000000f, 1.821277f, 0.864941f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.866026f, 0.499999f, -20.000000f, 1.821277f, 0.906607f, 
		-0.866026f, 0.499999f, -20.000000f, 1.821277f, 0.906607f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.707107f, 0.707106f, -20.000000f, 1.821277f, 0.948274f, 
		-0.707107f, 0.707106f, -20.000000f, 1.821277f, 0.948274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.500001f, 0.866025f, -20.000000f, 1.821277f, 0.989940f, 
		-0.500001f, 0.866025f, -20.000000f, 1.821277f, 0.989940f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.258820f, 0.965926f, -20.000000f, 1.821277f, 1.031607f, 
		-0.258820f, 0.965926f, -20.000000f, 1.821277f, 1.031607f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, 0.930721f, 
		-0.000001f, 1.000000f, -20.000000f, 1.821277f, 1.073274f, 
		-0.000001f, 1.000000f, -20.000000f, 1.821277f, 0.073274f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.258818f, 0.965926f, -20.000000f, 1.821277f, 0.114940f, 
		0.258818f, 0.965926f, -20.000000f, 1.821277f, 0.114940f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.499999f, 0.866026f, -20.000000f, 1.821277f, 0.156607f, 
		0.000000f, 0.000000f, -21.000000f, -0.678723f, -0.069279f, 
		0.707107f, 0.707107f, -20.000000f, 1.821277f, 0.198274f, 
		0.499999f, 0.866026f, -20.000000f, 1.821277f, 0.156607f, 
		0.499999f, 0.866026f, -20.000000f, -9.458333f, 0.125000f, 
		0.707107f, 0.707107f, -20.000000f, -9.458333f, 0.166666f, 
		0.707106f, 0.707107f, 20.000000f, 10.541665f, 0.166666f, 
		0.499999f, 0.866026f, -20.000000f, -9.458333f, 0.125000f, 
		0.707106f, 0.707107f, 20.000000f, 10.541665f, 0.166666f, 
		0.500006f, 0.866022f, 20.000000f, 10.541665f, 0.125001f, 
		0.258818f, 0.965926f, -20.000000f, -9.458333f, 0.083333f, 
		0.499999f, 0.866026f, -20.000000f, -9.458333f, 0.125000f, 
		0.500006f, 0.866022f, 20.000000f, 10.541665f, 0.125001f, 
		0.258818f, 0.965926f, -20.000000f, -9.458333f, 0.083333f, 
		0.500006f, 0.866022f, 20.000000f, 10.541665f, 0.125001f, 
		0.258825f, 0.965924f, 20.000000f, 10.541665f, 0.083334f, 
		-0.000001f, 1.000000f, -20.000000f, -9.458333f, 0.041666f, 
		0.258818f, 0.965926f, -20.000000f, -9.458333f, 0.083333f, 
		0.258825f, 0.965924f, 20.000000f, 10.541665f, 0.083334f, 
		-0.000001f, 1.000000f, -20.000000f, -9.458333f, 0.041666f, 
		0.258825f, 0.965924f, 20.000000f, 10.541665f, 0.083334f, 
		0.000006f, 1.000000f, 20.000000f, 10.541665f, 0.041667f, 
		-0.258820f, 0.965926f, -20.000000f, -9.458333f, 0.000000f, 
		-0.000001f, 1.000000f, -20.000000f, -9.458333f, 0.041666f, 
		0.000006f, 1.000000f, 20.000000f, 10.541665f, 0.041667f, 
		-0.258820f, 0.965926f, -20.000000f, -9.458333f, 0.000000f, 
		0.000006f, 1.000000f, 20.000000f, 10.541665f, 0.041667f, 
		-0.258814f, 0.965927f, 20.000000f, 10.541665f, 0.000000f, 
		-0.500001f, 0.866025f, -20.000000f, -9.458333f, 0.958333f, 
		-0.258820f, 0.965926f, -20.000000f, -9.458333f, 1.000000f, 
		-0.258814f, 0.965927f, 20.000000f, 10.541665f, 1.000000f, 
		-0.500001f, 0.866025f, -20.000000f, -9.458333f, 0.958333f, 
		-0.258814f, 0.965927f, 20.000000f, 10.541665f, 1.000000f, 
		-0.499995f, 0.866028f, 20.000000f, 10.541665f, 0.958333f, 
		-0.707107f, 0.707106f, -20.000000f, -9.458333f, 0.916667f, 
		-0.500001f, 0.866025f, -20.000000f, -9.458333f, 0.958333f, 
		-0.499995f, 0.866028f, 20.000000f, 10.541665f, 0.958333f, 
		-0.707107f, 0.707106f, -20.000000f, -9.458333f, 0.916667f, 
		-0.499995f, 0.866028f, 20.000000f, 10.541665f, 0.958333f, 
		-0.707103f, 0.707110f, 20.000000f, 10.541665f, 0.916667f, 
		-0.866026f, 0.499999f, -20.000000f, -9.458333f, 0.875000f, 
		-0.707107f, 0.707106f, -20.000000f, -9.458333f, 0.916667f, 
		-0.707103f, 0.707110f, 20.000000f, 10.541665f, 0.916667f, 
		-0.866026f, 0.499999f, -20.000000f, -9.458333f, 0.875000f, 
		-0.707103f, 0.707110f, 20.000000f, 10.541665f, 0.916667f, 
		-0.866023f, 0.500004f, 20.000000f, 10.541665f, 0.875000f, 
		-0.965926f, 0.258819f, -20.000000f, -9.458333f, 0.833333f, 
		-0.866026f, 0.499999f, -20.000000f, -9.458333f, 0.875000f, 
		-0.866023f, 0.500004f, 20.000000f, 10.541665f, 0.875000f, 
		-0.965926f, 0.258819f, -20.000000f, -9.458333f, 0.833333f, 
		-0.866023f, 0.500004f, 20.000000f, 10.541665f, 0.875000f, 
		-0.965925f, 0.258823f, 20.000000f, 10.541665f, 0.833333f, 
		-1.000000f, 0.000000f, -20.000000f, -9.458333f, 0.791667f, 
		-0.965926f, 0.258819f, -20.000000f, -9.458333f, 0.833333f, 
		-0.965925f, 0.258823f, 20.000000f, 10.541665f, 0.833333f, 
		-1.000000f, 0.000000f, -20.000000f, -9.458333f, 0.791667f, 
		-0.965925f, 0.258823f, 20.000000f, 10.541665f, 0.833333f, 
		-1.000000f, 0.000004f, 20.000000f, 10.541665f, 0.791666f, 
		-0.965926f, -0.258819f, -20.000000f, -9.458333f, 0.750000f, 
		-1.000000f, 0.000000f, -20.000000f, -9.458333f, 0.791667f, 
		-1.000000f, 0.000004f, 20.000000f, 10.541665f, 0.791666f, 
		-0.965926f, -0.258819f, -20.000000f, -9.458333f, 0.750000f, 
		-1.000000f, 0.000004f, 20.000000f, 10.541665f, 0.791666f, 
		-0.965927f, -0.258816f, 20.000000f, 10.541665f, 0.749999f, 
		-0.866025f, -0.500000f, -20.000000f, -9.458333f, 0.708334f, 
		-0.965926f, -0.258819f, -20.000000f, -9.458333f, 0.750000f, 
		-0.965927f, -0.258816f, 20.000000f, 10.541665f, 0.749999f, 
		-0.866025f, -0.500000f, -20.000000f, -9.458333f, 0.708334f, 
		-0.965927f, -0.258816f, 20.000000f, 10.541665f, 0.749999f, 
		-0.866027f, -0.499998f, 20.000000f, 10.541665f, 0.708333f, 
		-0.707106f, -0.707107f, -20.000000f, -9.458333f, 0.666667f, 
		-0.866025f, -0.500000f, -20.000000f, -9.458333f, 0.708334f, 
		-0.866027f, -0.499998f, 20.000000f, 10.541665f, 0.708333f, 
		-0.707106f, -0.707107f, -20.000000f, -9.458333f, 0.666667f, 
		-0.866027f, -0.499998f, 20.000000f, 10.541665f, 0.708333f, 
		-0.707108f, -0.707105f, 20.000000f, 10.541665f, 0.666666f, 
		-0.500000f, -0.866026f, -20.000000f, -9.458333f, 0.625000f, 
		-0.707106f, -0.707107f, -20.000000f, -9.458333f, 0.666667f, 
		-0.707108f, -0.707105f, 20.000000f, 10.541665f, 0.666666f, 
		-0.500000f, -0.866026f, -20.000000f, -9.458333f, 0.625000f, 
		-0.707108f, -0.707105f, 20.000000f, 10.541665f, 0.666666f, 
		-0.500002f, -0.866024f, 20.000000f, 10.541665f, 0.624999f, 
		-0.258819f, -0.965926f, -20.000000f, -9.458333f, 0.583334f, 
		-0.500000f, -0.866026f, -20.000000f, -9.458333f, 0.625000f, 
		-0.500002f, -0.866024f, 20.000000f, 10.541665f, 0.624999f, 
		-0.258819f, -0.965926f, -20.000000f, -9.458333f, 0.583334f, 
		-0.500002f, -0.866024f, 20.000000f, 10.541665f, 0.624999f, 
		-0.258820f, -0.965925f, 20.000000f, 10.541665f, 0.583332f, 
		0.000000f, -1.000000f, -20.000000f, -9.458333f, 0.541667f, 
		-0.258819f, -0.965926f, -20.000000f, -9.458333f, 0.583334f, 
		-0.258820f, -0.965925f, 20.000000f, 10.541665f, 0.583332f, 
		0.000000f, -1.000000f, -20.000000f, -9.458333f, 0.541667f, 
		-0.258820f, -0.965925f, 20.000000f, 10.541665f, 0.583332f, 
		-0.000001f, -1.000000f, 20.000000f, 10.541665f, 0.541666f, 
		0.258819f, -0.965926f, -20.000000f, -9.458333f, 0.500000f, 
		0.000000f, -1.000000f, -20.000000f, -9.458333f, 0.541667f, 
		-0.000001f, -1.000000f, 20.000000f, 10.541665f, 0.541666f, 
		0.258819f, -0.965926f, -20.000000f, -9.458333f, 0.500000f, 
		-0.000001f, -1.000000f, 20.000000f, 10.541665f, 0.541666f, 
		0.258819f, -0.965926f, 20.000000f, 10.541665f, 0.499999f, 
		0.500000f, -0.866025f, -20.000000f, -9.458333f, 0.458333f, 
		0.258819f, -0.965926f, -20.000000f, -9.458333f, 0.500000f, 
		0.258819f, -0.965926f, 20.000000f, 10.541665f, 0.499999f, 
		0.500000f, -0.866025f, -20.000000f, -9.458333f, 0.458333f, 
		0.258819f, -0.965926f, 20.000000f, 10.541665f, 0.499999f, 
		0.500000f, -0.866025f, 20.000000f, 10.541665f, 0.458332f, 
		0.707107f, -0.707107f, -20.000000f, -9.458333f, 0.416667f, 
		0.500000f, -0.866025f, -20.000000f, -9.458333f, 0.458333f, 
		0.500000f, -0.866025f, 20.000000f, 10.541665f, 0.458332f, 
		0.707107f, -0.707107f, -20.000000f, -9.458333f, 0.416667f, 
		0.500000f, -0.866025f, 20.000000f, 10.541665f, 0.458332f, 
		0.707107f, -0.707107f, 20.000000f, 10.541665f, 0.416666f, 
		0.866026f, -0.500000f, -20.000000f, -9.458333f, 0.375000f, 
		0.707107f, -0.707107f, -20.000000f, -9.458333f, 0.416667f, 
		0.707107f, -0.707107f, 20.000000f, 10.541665f, 0.416666f, 
		0.866026f, -0.500000f, -20.000000f, -9.458333f, 0.375000f, 
		0.707107f, -0.707107f, 20.000000f, 10.541665f, 0.416666f, 
		0.866026f, -0.499999f, 20.000000f, 10.541665f, 0.374999f, 
		0.965926f, -0.258819f, -20.000000f, -9.458333f, 0.333333f, 
		0.866026f, -0.500000f, -20.000000f, -9.458333f, 0.375000f, 
		0.866026f, -0.499999f, 20.000000f, 10.541665f, 0.374999f, 
		0.965926f, -0.258819f, -20.000000f, -9.458333f, 0.333333f, 
		0.866026f, -0.499999f, 20.000000f, 10.541665f, 0.374999f, 
		0.965926f, -0.258818f, 20.000000f, 10.541665f, 0.333332f, 
		1.000000f, 0.000000f, -20.000000f, -9.458333f, 0.291666f, 
		0.965926f, -0.258819f, -20.000000f, -9.458333f, 0.333333f, 
		0.965926f, -0.258818f, 20.000000f, 10.541665f, 0.333332f, 
		1.000000f, 0.000000f, -20.000000f, -9.458333f, 0.291666f, 
		0.965926f, -0.258818f, 20.000000f, 10.541665f, 0.333332f, 
		1.000000f, 0.000001f, 20.000000f, 10.541665f, 0.291666f, 
		0.965926f, 0.258819f, -20.000000f, -9.458333f, 0.250000f, 
		1.000000f, 0.000000f, -20.000000f, -9.458333f, 0.291666f, 
		1.000000f, 0.000001f, 20.000000f, 10.541665f, 0.291666f, 
		0.965926f, 0.258819f, -20.000000f, -9.458333f, 0.250000f, 
		1.000000f, 0.000001f, 20.000000f, 10.541665f, 0.291666f, 
		0.965926f, 0.258820f, 20.000000f, 10.541665f, 0.249999f, 
		0.866025f, 0.500000f, -20.000000f, -9.458333f, 0.208333f, 
		0.965926f, 0.258819f, -20.000000f, -9.458333f, 0.250000f, 
		0.965926f, 0.258820f, 20.000000f, 10.541665f, 0.249999f, 
		0.866025f, 0.500000f, -20.000000f, -9.458333f, 0.208333f, 
		0.965926f, 0.258820f, 20.000000f, 10.541665f, 0.249999f, 
		0.866025f, 0.500001f, 20.000000f, 10.541665f, 0.208333f, 
		0.707107f, 0.707107f, -20.000000f, -9.458333f, 0.166666f, 
		0.866025f, 0.500000f, -20.000000f, -9.458333f, 0.208333f, 
		0.866025f, 0.500001f, 20.000000f, 10.541665f, 0.208333f, 
		0.707107f, 0.707107f, -20.000000f, -9.458333f, 0.166666f, 
		0.866025f, 0.500001f, 20.000000f, 10.541665f, 0.208333f, 
		0.707106f, 0.707107f, 20.000000f, 10.541665f, 0.166666f, 
	};

	unsigned index_data[] = {
		0, 
		1, 
		2, 
		3, 
		4, 
		5, 
		6, 
		7, 
		8, 
		9, 
		10, 
		11, 
		12, 
		13, 
		14, 
		15, 
		16, 
		17, 
		18, 
		19, 
		20, 
		21, 
		22, 
		23, 
		24, 
		25, 
		26, 
		27, 
		28, 
		29, 
		30, 
		31, 
		32, 
		33, 
		34, 
		35, 
		36, 
		37, 
		38, 
		39, 
		40, 
		41, 
		42, 
		43, 
		44, 
		45, 
		46, 
		47, 
		48, 
		49, 
		50, 
		51, 
		52, 
		53, 
		54, 
		55, 
		56, 
		57, 
		58, 
		59, 
		60, 
		61, 
		62, 
		63, 
		64, 
		65, 
		66, 
		67, 
		68, 
		69, 
		70, 
		71, 
		72, 
		73, 
		74, 
		75, 
		76, 
		77, 
		78, 
		79, 
		80, 
		81, 
		82, 
		83, 
		84, 
		85, 
		86, 
		87, 
		88, 
		89, 
		90, 
		91, 
		92, 
		93, 
		94, 
		95, 
		96, 
		97, 
		98, 
		99, 
		100, 
		101, 
		102, 
		103, 
		104, 
		105, 
		106, 
		107, 
		108, 
		109, 
		110, 
		111, 
		112, 
		113, 
		114, 
		115, 
		116, 
		117, 
		118, 
		119, 
		120, 
		121, 
		122, 
		123, 
		124, 
		125, 
		126, 
		127, 
		128, 
		129, 
		130, 
		131, 
		132, 
		133, 
		134, 
		135, 
		136, 
		137, 
		138, 
		139, 
		140, 
		141, 
		142, 
		143, 
		144, 
		145, 
		146, 
		147, 
		148, 
		149, 
		150, 
		151, 
		152, 
		153, 
		154, 
		155, 
		156, 
		157, 
		158, 
		159, 
		160, 
		161, 
		162, 
		163, 
		164, 
		165, 
		166, 
		167, 
		168, 
		169, 
		170, 
		171, 
		172, 
		173, 
		174, 
		175, 
		176, 
		177, 
		178, 
		179, 
		180, 
		181, 
		182, 
		183, 
		184, 
		185, 
		186, 
		187, 
		188, 
		189, 
		190, 
		191, 
		192, 
		193, 
		194, 
		195, 
		196, 
		197, 
		198, 
		199, 
		200, 
		201, 
		202, 
		203, 
		204, 
		205, 
		206, 
		207, 
		208, 
		209, 
		210, 
		211, 
		212, 
		213, 
		214, 
		215, 
		216, 
		217, 
		218, 
		219, 
		220, 
		221, 
		222, 
		223, 
		224, 
		225, 
		226, 
		227, 
		228, 
		229, 
		230, 
		231, 
		232, 
		233, 
		234, 
		235, 
		236, 
		237, 
		238, 
		239, 
		240, 
		241, 
		242, 
		243, 
		244, 
		245, 
		246, 
		247, 
		248, 
		249, 
		250, 
		251, 
		252, 
		253, 
		254, 
		255, 
		256, 
		257, 
		258, 
		259, 
		260, 
		261, 
		262, 
		263, 
		264, 
		265, 
		266, 
		267, 
		268, 
		269, 
		270, 
		271, 
		272, 
		273, 
		274, 
		275, 
		276, 
		277, 
		278, 
		279, 
		280, 
		281, 
		282, 
		283, 
		284, 
		285, 
		286, 
		287, 
	};

	SDL_Surface *screen;

	class Texture {
		SDL_Surface *tex;
	public:
		Texture()
		{
			SDL_Surface *tmp = IMG_Load("data/tunnel.png");
			tex = SDL_DisplayFormat(tmp);
			SDL_FreeSurface(tmp);
		}

		~Texture()
		{
			SDL_FreeSurface(tex);
		}

		unsigned short sample(int x, int y)
		{
			int tx = x >> (24 - 7);
			int ty = y >> (24 - 7);

			tx &= 128 - 1;
			ty &= 128 - 1;

			return *((unsigned short*)tex->pixels + tx + (ty << 7));
		}
	};

	class VertexShader {
		struct InputVertex {
			vec3x vertex;
			int tx, ty;
		};

	public:
		static const unsigned attribute_count = 1;
		static const unsigned varying_count = 2;

	public:
		static mat4x modelviewprojection_matrix;

		static void shade(const GeometryProcessor::VertexInput in, GeometryProcessor::VertexOutput &out)
		{
			const InputVertex &i = *static_cast<const InputVertex*>(in[0]);

			vec4x tvertex = modelviewprojection_matrix * vec4x(i.vertex, X(1.0f));

			out.x = tvertex.x.intValue;
			out.y = tvertex.y.intValue;
			out.z = tvertex.z.intValue;
			out.w = tvertex.w.intValue;
			
			out.varyings[0] = i.tx << 8;
			out.varyings[1] = i.ty << 8;
		}
	};

	mat4x VertexShader::modelviewprojection_matrix;


	class FragmentShader : public GenericSpanDrawer<FragmentShader> {
	public:
		static Texture *tex;
	public:
		static const unsigned varying_count = 2;
		static const bool interpolate_z = false;

		// per triangle callback
		static void begin_triangle(
			const IRasterizer::Vertex& v1, 
			const IRasterizer::Vertex& v2, 
			const IRasterizer::Vertex& v3,
			int area2)
		{}

		static void single_fragment(int x, int y, const IRasterizer::FragmentData &fd)
		{
			unsigned short* color_buffer = (unsigned short*)screen->pixels + 
				(x) + (y)*screen->w;

			*color_buffer = tex->sample(fd.varyings[0], fd.varyings[1]);
		}
	};
	
	Texture* FragmentShader::tex;
} // end namespace

void scene3()
{
	screen = SDL_DisplayFormat(SDL_GetVideoSurface());
	
	for (size_t i = 0; i < sizeof(vertex_data)/sizeof(float); ++i) {
		int *v = reinterpret_cast<int*>(&vertex_data[i]);
		*v = float2fix<16>(vertex_data[i]);
	}

	RasterizerSubdivAffine r;
	GeometryProcessor g(&r);
	r.clip_rect(0, 0, 320, 240);
	g.viewport(0, 0, 320, 240);
	g.vertex_shader<VertexShader>();
	r.fragment_shader<FragmentShader>();
	/*r.interlace(0, 1);*/
	g.vertex_attrib_pointer(0, 5 * sizeof(float), vertex_data);

	Texture tex;
	FragmentShader::tex = &tex;

	mat4x projection_matrix = perspective_matrix(X(50.0f), X(4.0f/3.0f), X(0.1f), X(50.0f));

	
	Uint32 demolength = 15000;
	Uint32 demostart = SDL_GetTicks();
	Uint32 framecount = 0;
	while( true ) {
		SDL_Event e;
		while (SDL_PollEvent(&e)) {
			switch (e.type) {
				case SDL_QUIT: 
				case SDL_JOYBUTTONDOWN:
					exit(1);
			}
		}
		Uint32 t = SDL_GetTicks();
		Uint32 demotime = t - demostart;

		VertexShader::modelviewprojection_matrix = projection_matrix * 
			rotation_matrix<fixed16_t>(-(t/10.0f), 1, 0, 1) * 
			rotation_matrix<fixed16_t>((t/20.0f), 0, 1, 0) * 
			rotation_matrix<fixed16_t>(-(t/15.0f), 1, 0, 1);

		SDL_LockSurface(screen);
		g.draw_triangles(288, index_data);
		SDL_UnlockSurface(screen);



		flush_uppermem_cache(screen->pixels, (unsigned short*)screen->pixels + 320 * 240,0);
		if (demotime < 1000) {
			fade_effect(screen, false, 1.0f - (t-demostart)/1000.0f);
		}

		if (demotime > demolength) {
			float x = (demotime - demolength)/1000.0f;
			fade_effect(screen, true, x);
		}

		SDL_BlitSurface(screen, 0, SDL_GetVideoSurface(), 0);
		SDL_Flip(SDL_GetVideoSurface());

		if (t-demostart > demolength + 1000)
			goto end;

		static int fpscounter = 0;
		static Uint32 fpst = SDL_GetTicks();
		fpscounter++;
		if (SDL_GetTicks() >= fpst + 1000) {
			fpst += 1000;
			printf("%4i fps\n", fpscounter);
			fpscounter = 0;
		}

		framecount++;
	}
end:;

	printf("avg. fps: %f\n", (float)framecount * 1000.0f/(SDL_GetTicks() - demostart));

	SDL_FreeSurface(screen);
}
