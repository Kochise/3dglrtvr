/******************************************************************
 * File: ps20_parser.cpp
 *
 * This file was automatically generated by CppCC Version 0.0.5
 * DO NOT EDIT MANUALLY
 ******************************************************************/



#include "ps20_parser.hpp"

void swShader::ps20_parser::main ()
     throw (ScanException, ParseException)
{
  while (__la_0_(1000000000)) {
    instruction();
    consumeToken(ps20_token::EOL);
    while ((scanner.la()->id == ps20_token::EOL)) {
      consumeToken(ps20_token::EOL);
    }
    {newInstruction();}

  }
  try {
    if ((scanner.la()->id == ps20_token::PS_2_0) || (scanner.la()->id == ps20_token::DCL) || (scanner.la()->id == ps20_token::DCL_2D) || (scanner.la()->id == ps20_token::DCL_CUBE) || (scanner.la()->id == ps20_token::DCL_VOLUME) || (scanner.la()->id == ps20_token::DEF) || (scanner.la()->id == ps20_token::ABS) || (scanner.la()->id == ps20_token::ADD) || (scanner.la()->id == ps20_token::CMP) || (scanner.la()->id == ps20_token::CRS) || (scanner.la()->id == ps20_token::DP2ADD) || (scanner.la()->id == ps20_token::DP3) || (scanner.la()->id == ps20_token::DP4) || (scanner.la()->id == ps20_token::EXP) || (scanner.la()->id == ps20_token::FRC) || (scanner.la()->id == ps20_token::LOG) || (scanner.la()->id == ps20_token::LRP) || (scanner.la()->id == ps20_token::M3X2) || (scanner.la()->id == ps20_token::M3X3) || (scanner.la()->id == ps20_token::M3X4) || (scanner.la()->id == ps20_token::M4X3) || (scanner.la()->id == ps20_token::M4X4) || (scanner.la()->id == ps20_token::MAD) || (scanner.la()->id == ps20_token::MAX) || (scanner.la()->id == ps20_token::MIN) || (scanner.la()->id == ps20_token::MOV) || (scanner.la()->id == ps20_token::MUL) || (scanner.la()->id == ps20_token::NOP) || (scanner.la()->id == ps20_token::NRM) || (scanner.la()->id == ps20_token::POW) || (scanner.la()->id == ps20_token::RCP) || (scanner.la()->id == ps20_token::RSQ) || (scanner.la()->id == ps20_token::SINCOS) || (scanner.la()->id == ps20_token::SUB) || (scanner.la()->id == ps20_token::TEXKILL) || (scanner.la()->id == ps20_token::TEXLD) || (scanner.la()->id == ps20_token::TEXLDB) || (scanner.la()->id == ps20_token::TEXLDP)) {
      instruction();
    } else { 
       /* lambda */
    }
  } catch (ParseException&)
 {
			throw Error("Error parsing file");
		;

  }
}


void swShader::ps20_parser::instruction ()
     throw (ScanException, ParseException)
{
			m = Instruction::INVALID;
			x = Instruction::_NONE;
			d = voidOperand;
			s0 = voidOperand;
			s1 = voidOperand;
			s2 = voidOperand;
			s3 = voidOperand;
		;

  try {
    if ((scanner.la()->id == ps20_token::ABS)) {
      absInstruction();
    } else { 
      if ((scanner.la()->id == ps20_token::ADD)) {
        addInstruction();
      } else { 
        if ((scanner.la()->id == ps20_token::CMP)) {
          cmpInstruction();
        } else { 
          if ((scanner.la()->id == ps20_token::CRS)) {
            crsInstruction();
          } else { 
            if ((scanner.la()->id == ps20_token::DCL)) {
              dclInstruction();
            } else { 
              if ((scanner.la()->id == ps20_token::DCL_2D)) {
                dcl_2dInstruction();
              } else { 
                if ((scanner.la()->id == ps20_token::DCL_CUBE)) {
                  dcl_cubeInstruction();
                } else { 
                  if ((scanner.la()->id == ps20_token::DCL_VOLUME)) {
                    dcl_volumeInstruction();
                  } else { 
                    if ((scanner.la()->id == ps20_token::DEF)) {
                      defInstruction();
                    } else { 
                      if ((scanner.la()->id == ps20_token::DP2ADD)) {
                        dp2addInstruction();
                      } else { 
                        if ((scanner.la()->id == ps20_token::DP3)) {
                          dp3Instruction();
                        } else { 
                          if ((scanner.la()->id == ps20_token::DP4)) {
                            dp4Instruction();
                          } else { 
                            if ((scanner.la()->id == ps20_token::EXP)) {
                              expInstruction();
                            } else { 
                              if ((scanner.la()->id == ps20_token::FRC)) {
                                frcInstruction();
                              } else { 
                                if ((scanner.la()->id == ps20_token::LOG)) {
                                  logInstruction();
                                } else { 
                                  if ((scanner.la()->id == ps20_token::LRP)) {
                                    lrpInstruction();
                                  } else { 
                                    if ((scanner.la()->id == ps20_token::M3X2)) {
                                      m3x2Instruction();
                                    } else { 
                                      if ((scanner.la()->id == ps20_token::M3X3)) {
                                        m3x3Instruction();
                                      } else { 
                                        if ((scanner.la()->id == ps20_token::M3X4)) {
                                          m3x4Instruction();
                                        } else { 
                                          if ((scanner.la()->id == ps20_token::M4X3)) {
                                            m4x3Instruction();
                                          } else { 
                                            if ((scanner.la()->id == ps20_token::M4X4)) {
                                              m4x4Instruction();
                                            } else { 
                                              if ((scanner.la()->id == ps20_token::MAD)) {
                                                madInstruction();
                                              } else { 
                                                if ((scanner.la()->id == ps20_token::MAX)) {
                                                  maxInstruction();
                                                } else { 
                                                  if ((scanner.la()->id == ps20_token::MIN)) {
                                                    minInstruction();
                                                  } else { 
                                                    if ((scanner.la()->id == ps20_token::MOV)) {
                                                      movInstruction();
                                                    } else { 
                                                      if ((scanner.la()->id == ps20_token::MUL)) {
                                                        mulInstruction();
                                                      } else { 
                                                        if ((scanner.la()->id == ps20_token::NOP)) {
                                                          nopInstruction();
                                                        } else { 
                                                          if ((scanner.la()->id == ps20_token::NRM)) {
                                                            nrmInstruction();
                                                          } else { 
                                                            if ((scanner.la()->id == ps20_token::POW)) {
                                                              powInstruction();
                                                            } else { 
                                                              if ((scanner.la()->id == ps20_token::PS_2_0)) {
                                                                psInstruction();
                                                              } else { 
                                                                if ((scanner.la()->id == ps20_token::RCP)) {
                                                                  rcpInstruction();
                                                                } else { 
                                                                  if ((scanner.la()->id == ps20_token::RSQ)) {
                                                                    rsqInstruction();
                                                                  } else { 
                                                                    if ((scanner.la()->id == ps20_token::SINCOS)) {
                                                                      sincosInstruction();
                                                                    } else { 
                                                                      if ((scanner.la()->id == ps20_token::SUB)) {
                                                                        subInstruction();
                                                                      } else { 
                                                                        if ((scanner.la()->id == ps20_token::TEXKILL)) {
                                                                          texkillInstruction();
                                                                        } else { 
                                                                          if ((scanner.la()->id == ps20_token::TEXLD)) {
                                                                            texldInstruction();
                                                                          } else { 
                                                                            if ((scanner.la()->id == ps20_token::TEXLDB)) {
                                                                              texldbInstruction();
                                                                            } else { 
                                                                              texldpInstruction();
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } catch (ParseException&)
 {
			throw Error("Expected an instruction");
		;

  }
  {
			setMnemonic(m);
			setModifier(x);
			setDestination(d);
			setSource0(s0);
			setSource1(s1);
			setSource2(s2);
			setSource3(s3);
		}

}


void swShader::ps20_parser::psInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::PS_2_0);
  {m = Instruction::PS_2_0;}

}


void swShader::ps20_parser::dclInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DCL);
  {m = Instruction::DCL;}

  dest();
}


void swShader::ps20_parser::dcl_2dInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DCL_2D);
  {m = Instruction::DCL_2D;}

  sn();
}


void swShader::ps20_parser::dcl_cubeInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DCL_CUBE);
  {m = Instruction::DCL_CUBE;}

  sn();
}


void swShader::ps20_parser::dcl_volumeInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DCL_VOLUME);
  {m = Instruction::DCL_VOLUME;}

  sn();
}


void swShader::ps20_parser::defInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DEF);
  {m = Instruction::DEF;}

  cn();
  consumeToken(ps20_token::COMMA);
  fValue1();
  consumeToken(ps20_token::COMMA);
  fValue2();
  consumeToken(ps20_token::COMMA);
  fValue3();
  consumeToken(ps20_token::COMMA);
  fValue4();
}


void swShader::ps20_parser::absInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::ABS);
  {m = Instruction::ABS;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::addInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::ADD);
  {m = Instruction::ADD;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::cmpInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::CMP);
  {m = Instruction::CMP;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
  consumeToken(ps20_token::COMMA);
  src2();
}


void swShader::ps20_parser::crsInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::CRS);
  {m = Instruction::CRS;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::dp2addInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DP2ADD);
  {m = Instruction::DP2ADD;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
  consumeToken(ps20_token::COMMA);
  src2();
}


void swShader::ps20_parser::dp3Instruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DP3);
  {m = Instruction::DP3;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::dp4Instruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::DP4);
  {m = Instruction::DP4;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::expInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::EXP);
  {m = Instruction::EXP;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::frcInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::FRC);
  {m = Instruction::FRC;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::logInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::LOG);
  {m = Instruction::LOG;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::lrpInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::LRP);
  {m = Instruction::LRP;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
  consumeToken(ps20_token::COMMA);
  src2();
}


void swShader::ps20_parser::m3x2Instruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::M3X2);
  {m = Instruction::M3X2;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::m3x3Instruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::M3X3);
  {m = Instruction::M3X3;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::m3x4Instruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::M3X4);
  {m = Instruction::M3X4;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::m4x3Instruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::M4X3);
  {m = Instruction::M4X3;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::m4x4Instruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::M4X4);
  {m = Instruction::M4X4;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::madInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::MAD);
  {m = Instruction::MAD;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
  consumeToken(ps20_token::COMMA);
  src2();
}


void swShader::ps20_parser::maxInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::MAX);
  {m = Instruction::MAX;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::minInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::MIN);
  {m = Instruction::MIN;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::movInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::MOV);
  {m = Instruction::MOV;}

  instructionModifier();
  if ((scanner.la()->id == ps20_token::R0) || (scanner.la()->id == ps20_token::R1) || (scanner.la()->id == ps20_token::R2) || (scanner.la()->id == ps20_token::R3) || (scanner.la()->id == ps20_token::R4) || (scanner.la()->id == ps20_token::R5) || (scanner.la()->id == ps20_token::R6) || (scanner.la()->id == ps20_token::R7) || (scanner.la()->id == ps20_token::R8) || (scanner.la()->id == ps20_token::R9) || (scanner.la()->id == ps20_token::R10) || (scanner.la()->id == ps20_token::R11)) {
    dst();
  } else { 
    outputRegister();
  }
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::mulInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::MUL);
  {m = Instruction::MUL;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::nopInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::NOP);
  {m = Instruction::NOP;}

}


void swShader::ps20_parser::nrmInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::NRM);
  {m = Instruction::NRM;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::powInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::POW);
  {m = Instruction::POW;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::rcpInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::RCP);
  {m = Instruction::RCP;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::rsqInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::RSQ);
  {m = Instruction::RSQ;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src();
}


void swShader::ps20_parser::sincosInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::SINCOS);
  {m = Instruction::SINCOS;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
  consumeToken(ps20_token::COMMA);
  src2();
}


void swShader::ps20_parser::subInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::SUB);
  {m = Instruction::SUB;}

  instructionModifier();
  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::texkillInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::TEXKILL);
  {m = Instruction::TEXKILL;}

  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::texldInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::TEXLD);
  {m = Instruction::TEXLD;}

  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::texldbInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::TEXLDB);
  {m = Instruction::TEXLDB;}

  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::texldpInstruction ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::TEXLDP);
  {m = Instruction::TEXLDP;}

  dst();
  consumeToken(ps20_token::COMMA);
  src0();
  consumeToken(ps20_token::COMMA);
  src1();
}


void swShader::ps20_parser::instructionModifier ()
     throw (ScanException, ParseException)
{
			x = Instruction::_NONE;
		;

  if ((scanner.la()->id == ps20_token::_SAT) || (scanner.la()->id == ps20_token::_PP)) {
    if ((scanner.la()->id == ps20_token::_SAT)) {
      consumeToken(ps20_token::_SAT);
      {x = Instruction::_SAT;}

    } else { 
      consumeToken(ps20_token::_PP);
      {x = Instruction::_PP;}

    }
  } else { 
     /* lambda */
  }
}


void swShader::ps20_parser::dst ()
     throw (ScanException, ParseException)
{
  try {
    temporaryRegister();
    writeMask();
  } catch (ParseException&)
 {
			throw Error("Expected a temporary register r#");
		;

  }
  {d = t;}

}


void swShader::ps20_parser::dest ()
     throw (ScanException, ParseException)
{
  try {
    if ((scanner.la()->id == ps20_token::V0) || (scanner.la()->id == ps20_token::V1)) {
      colorRegister();
    } else { 
      inputTextureCoordinateRegister();
    }
  } catch (ParseException&)
 {
			throw Error("Expected a register v# or t#");
		;

  }
  {d = t;}

}


void swShader::ps20_parser::sn ()
     throw (ScanException, ParseException)
{
  try {
    samplerRegister();
  } catch (ParseException&)
 {
			throw Error("Expected a sampler register s#");
		;

  }
  {d = t;}

}


void swShader::ps20_parser::cn ()
     throw (ScanException, ParseException)
{
  try {
    constantFloatRegister();
  } catch (ParseException&)
 {
			throw Error("Expected a constant float register c#");
		;

  }
  {d = t;}

}


void swShader::ps20_parser::fValue1 ()
     throw (ScanException, ParseException)
{
  try {
    if ((scanner.la()->id == ps20_token::REAL)) {
      consumeToken(ps20_token::REAL);
    } else { 
      consumeToken(ps20_token::INTEGER);
    }
  } catch (ParseException&)
 {
			throw Error("Expected a floating-point literal");
		;

  }
  {
			s0.value = (float)strtod(token->image().c_str(), 0);
		}

}


void swShader::ps20_parser::fValue2 ()
     throw (ScanException, ParseException)
{
  try {
    if ((scanner.la()->id == ps20_token::REAL)) {
      consumeToken(ps20_token::REAL);
    } else { 
      consumeToken(ps20_token::INTEGER);
    }
  } catch (ParseException&)
 {
			throw Error("Expected a floating-point literal");
		;

  }
  {
			s1.value = (float)strtod(token->image().c_str(), 0);
		}

}


void swShader::ps20_parser::fValue3 ()
     throw (ScanException, ParseException)
{
  try {
    if ((scanner.la()->id == ps20_token::REAL)) {
      consumeToken(ps20_token::REAL);
    } else { 
      consumeToken(ps20_token::INTEGER);
    }
  } catch (ParseException&)
 {
			throw Error("Expected a floating-point literal");
		;

  }
  {
			s2.value = (float)strtod(token->image().c_str(), 0);
		}

}


void swShader::ps20_parser::fValue4 ()
     throw (ScanException, ParseException)
{
  try {
    if ((scanner.la()->id == ps20_token::REAL)) {
      consumeToken(ps20_token::REAL);
    } else { 
      consumeToken(ps20_token::INTEGER);
    }
  } catch (ParseException&)
 {
			throw Error("Expected a floating-point literal");
		;

  }
  {
			s3.value = (float)strtod(token->image().c_str(), 0);
		}

}


void swShader::ps20_parser::src ()
     throw (ScanException, ParseException)
{
  sourceModifier();
  inputRegister();
  sourceSwizzle();
  {s0 = t;}

}


void swShader::ps20_parser::src0 ()
     throw (ScanException, ParseException)
{
  sourceModifier();
  inputRegister();
  sourceSwizzle();
  {s0 = t;}

}


void swShader::ps20_parser::src1 ()
     throw (ScanException, ParseException)
{
  sourceModifier();
  inputRegister();
  sourceSwizzle();
  {s1 = t;}

}


void swShader::ps20_parser::src2 ()
     throw (ScanException, ParseException)
{
  sourceModifier();
  inputRegister();
  sourceSwizzle();
  {s2 = t;}

}


void swShader::ps20_parser::outputRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::O_C0) || (scanner.la()->id == ps20_token::O_C1) || (scanner.la()->id == ps20_token::O_C2) || (scanner.la()->id == ps20_token::O_C3)) {
    outputColorRegister();
  } else { 
    outputDepthRegister();
  }
  {d = t;}

}


void swShader::ps20_parser::inputRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::V0) || (scanner.la()->id == ps20_token::V1)) {
    colorRegister();
  } else { 
    if ((scanner.la()->id == ps20_token::C0) || (scanner.la()->id == ps20_token::C1) || (scanner.la()->id == ps20_token::C2) || (scanner.la()->id == ps20_token::C3) || (scanner.la()->id == ps20_token::C4) || (scanner.la()->id == ps20_token::C5) || (scanner.la()->id == ps20_token::C6) || (scanner.la()->id == ps20_token::C7) || (scanner.la()->id == ps20_token::C8) || (scanner.la()->id == ps20_token::C9) || (scanner.la()->id == ps20_token::C10) || (scanner.la()->id == ps20_token::C11) || (scanner.la()->id == ps20_token::C12) || (scanner.la()->id == ps20_token::C13) || (scanner.la()->id == ps20_token::C14) || (scanner.la()->id == ps20_token::C15) || (scanner.la()->id == ps20_token::C16) || (scanner.la()->id == ps20_token::C17) || (scanner.la()->id == ps20_token::C18) || (scanner.la()->id == ps20_token::C19) || (scanner.la()->id == ps20_token::C20) || (scanner.la()->id == ps20_token::C21) || (scanner.la()->id == ps20_token::C22) || (scanner.la()->id == ps20_token::C23) || (scanner.la()->id == ps20_token::C24) || (scanner.la()->id == ps20_token::C25) || (scanner.la()->id == ps20_token::C26) || (scanner.la()->id == ps20_token::C27) || (scanner.la()->id == ps20_token::C28) || (scanner.la()->id == ps20_token::C29) || (scanner.la()->id == ps20_token::C30) || (scanner.la()->id == ps20_token::C31)) {
      constantFloatRegister();
    } else { 
      if ((scanner.la()->id == ps20_token::T0) || (scanner.la()->id == ps20_token::T1) || (scanner.la()->id == ps20_token::T2) || (scanner.la()->id == ps20_token::T3) || (scanner.la()->id == ps20_token::T4) || (scanner.la()->id == ps20_token::T5) || (scanner.la()->id == ps20_token::T6) || (scanner.la()->id == ps20_token::T7)) {
        inputTextureCoordinateRegister();
      } else { 
        if ((scanner.la()->id == ps20_token::S0) || (scanner.la()->id == ps20_token::S1) || (scanner.la()->id == ps20_token::S2) || (scanner.la()->id == ps20_token::S3) || (scanner.la()->id == ps20_token::S4) || (scanner.la()->id == ps20_token::S5) || (scanner.la()->id == ps20_token::S6) || (scanner.la()->id == ps20_token::S7) || (scanner.la()->id == ps20_token::S8) || (scanner.la()->id == ps20_token::S9) || (scanner.la()->id == ps20_token::S10) || (scanner.la()->id == ps20_token::S11) || (scanner.la()->id == ps20_token::S12) || (scanner.la()->id == ps20_token::S13) || (scanner.la()->id == ps20_token::S14) || (scanner.la()->id == ps20_token::S15)) {
          samplerRegister();
        } else { 
          temporaryRegister();
        }
      }
    }
  }
}


void swShader::ps20_parser::sourceModifier ()
     throw (ScanException, ParseException)
{
			t.mod = Operand::SourceModifier::NONE;
		;

  if ((scanner.la()->id == ps20_token::MINUS)) {
    consumeToken(ps20_token::MINUS);
    {
				t.mod = Operand::SourceModifier::NEGATE;
			}

  } else { 
     /* lambda */
  }
}


void swShader::ps20_parser::writeMask ()
     throw (ScanException, ParseException)
{
			// Mask all components
			t.sel.x = Operand::X;
			t.sel.y = Operand::Y;
			t.sel.z = Operand::Z;
			t.sel.w = Operand::W;
		;

  if (__la_1_(1000000000)) {
    consumeToken(ps20_token::DOT);
    {
				// Mask all components
				t.sel.x = Operand::M;
				t.sel.y = Operand::M;
				t.sel.z = Operand::M;
				t.sel.w = Operand::M;
			}

    if ((scanner.la()->id == ps20_token::X)) {
      consumeToken(ps20_token::X);
      {t.sel.x = Operand::X;}

      if ((scanner.la()->id == ps20_token::Y)) {
        consumeToken(ps20_token::Y);
        {t.sel.y = Operand::Y;}

      } else { 
         /* lambda */
      }
      if ((scanner.la()->id == ps20_token::Z)) {
        consumeToken(ps20_token::Z);
        {t.sel.z = Operand::Z;}

      } else { 
         /* lambda */
      }
      if ((scanner.la()->id == ps20_token::W)) {
        consumeToken(ps20_token::W);
        {t.sel.w = Operand::W;}

      } else { 
         /* lambda */
      }
    } else { 
      if ((scanner.la()->id == ps20_token::Y)) {
        consumeToken(ps20_token::Y);
        {t.sel.y = Operand::Y;}

        if ((scanner.la()->id == ps20_token::Z)) {
          consumeToken(ps20_token::Z);
          {t.sel.z = Operand::Z;}

        } else { 
           /* lambda */
        }
        if ((scanner.la()->id == ps20_token::W)) {
          consumeToken(ps20_token::W);
          {t.sel.w = Operand::W;}

        } else { 
           /* lambda */
        }
      } else { 
        if ((scanner.la()->id == ps20_token::Z)) {
          consumeToken(ps20_token::Z);
          {t.sel.z = Operand::Z;}

          if ((scanner.la()->id == ps20_token::W)) {
            consumeToken(ps20_token::W);
            {t.sel.w = Operand::W;}

          } else { 
             /* lambda */
          }
        } else { 
          consumeToken(ps20_token::W);
          {t.sel.w = Operand::W;}

        }
      }
    }
  } else { 
     /* lambda */
  }
}


void swShader::ps20_parser::sourceSwizzle ()
     throw (ScanException, ParseException)
{
			t.sel.x = Operand::Component::X;
			t.sel.y = Operand::Component::Y;
			t.sel.z = Operand::Component::Z;
			t.sel.w = Operand::Component::W;
		;

  if ((scanner.la()->id == ps20_token::DOT)) {
    consumeToken(ps20_token::DOT);
    if ((scanner.la()->id == ps20_token::X)) {
      consumeToken(ps20_token::X);
      {t.sel.x = Operand::X; t.sel.y = Operand::X; t.sel.z = Operand::X; t.sel.w = Operand::X;}

    } else { 
      if ((scanner.la()->id == ps20_token::Y)) {
        consumeToken(ps20_token::Y);
        {t.sel.x = Operand::Y; t.sel.y = Operand::Y; t.sel.z = Operand::Y; t.sel.w = Operand::Y;}

      } else { 
        if ((scanner.la()->id == ps20_token::Z)) {
          consumeToken(ps20_token::Z);
          {t.sel.x = Operand::Z; t.sel.y = Operand::Z; t.sel.z = Operand::Z; t.sel.w = Operand::Z;}

        } else { 
          consumeToken(ps20_token::W);
          {t.sel.x = Operand::W; t.sel.y = Operand::W; t.sel.z = Operand::W; t.sel.w = Operand::W;}

        }
      }
    }
    if (__la_2_(1000000000)) {
      if ((scanner.la()->id == ps20_token::X)) {
        consumeToken(ps20_token::X);
        {t.sel.y = Operand::X; t.sel.z = Operand::X; t.sel.w = Operand::X;}

      } else { 
        if ((scanner.la()->id == ps20_token::Y)) {
          consumeToken(ps20_token::Y);
          {t.sel.y = Operand::Y; t.sel.z = Operand::Y; t.sel.w = Operand::Y;}

        } else { 
          if ((scanner.la()->id == ps20_token::Z)) {
            consumeToken(ps20_token::Z);
            {t.sel.y = Operand::Z; t.sel.z = Operand::Z; t.sel.w = Operand::Z;}

          } else { 
            consumeToken(ps20_token::W);
            {t.sel.y = Operand::W; t.sel.z = Operand::W; t.sel.w = Operand::W;}

          }
        }
      }
    } else { 
       /* lambda */
    }
    if (__la_3_(1000000000)) {
      if ((scanner.la()->id == ps20_token::X)) {
        consumeToken(ps20_token::X);
        {t.sel.z = Operand::X; t.sel.w = Operand::X;}

      } else { 
        if ((scanner.la()->id == ps20_token::Y)) {
          consumeToken(ps20_token::Y);
          {t.sel.z = Operand::Y; t.sel.w = Operand::Y;}

        } else { 
          if ((scanner.la()->id == ps20_token::Z)) {
            consumeToken(ps20_token::Z);
            {t.sel.z = Operand::Z; t.sel.w = Operand::Z;}

          } else { 
            consumeToken(ps20_token::W);
            {t.sel.z = Operand::W; t.sel.w = Operand::W;}

          }
        }
      }
    } else { 
       /* lambda */
    }
    if ((scanner.la()->id == ps20_token::X) || (scanner.la()->id == ps20_token::Y) || (scanner.la()->id == ps20_token::Z) || (scanner.la()->id == ps20_token::W)) {
      if ((scanner.la()->id == ps20_token::X)) {
        consumeToken(ps20_token::X);
        {t.sel.w = Operand::X;}

      } else { 
        if ((scanner.la()->id == ps20_token::Y)) {
          consumeToken(ps20_token::Y);
          {t.sel.w = Operand::Y;}

        } else { 
          if ((scanner.la()->id == ps20_token::Z)) {
            consumeToken(ps20_token::Z);
            {t.sel.w = Operand::Z;}

          } else { 
            consumeToken(ps20_token::W);
            {t.sel.w = Operand::W;}

          }
        }
      }
    } else { 
       /* lambda */
    }
  } else { 
     /* lambda */
  }
}


void swShader::ps20_parser::colorRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::V0)) {
    consumeToken(ps20_token::V0);
    {t.reg = v0Register;}

  } else { 
    consumeToken(ps20_token::V1);
    {t.reg = v1Register;}

  }
}


void swShader::ps20_parser::constantFloatRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::C0)) {
    consumeToken(ps20_token::C0);
    {t.reg = c0Register;}

  } else { 
    if ((scanner.la()->id == ps20_token::C1)) {
      consumeToken(ps20_token::C1);
      {t.reg = c1Register;}

    } else { 
      if ((scanner.la()->id == ps20_token::C2)) {
        consumeToken(ps20_token::C2);
        {t.reg = c2Register;}

      } else { 
        if ((scanner.la()->id == ps20_token::C3)) {
          consumeToken(ps20_token::C3);
          {t.reg = c3Register;}

        } else { 
          if ((scanner.la()->id == ps20_token::C4)) {
            consumeToken(ps20_token::C4);
            {t.reg = c4Register;}

          } else { 
            if ((scanner.la()->id == ps20_token::C5)) {
              consumeToken(ps20_token::C5);
              {t.reg = c5Register;}

            } else { 
              if ((scanner.la()->id == ps20_token::C6)) {
                consumeToken(ps20_token::C6);
                {t.reg = c6Register;}

              } else { 
                if ((scanner.la()->id == ps20_token::C7)) {
                  consumeToken(ps20_token::C7);
                  {t.reg = c7Register;}

                } else { 
                  if ((scanner.la()->id == ps20_token::C8)) {
                    consumeToken(ps20_token::C8);
                    {t.reg = c8Register;}

                  } else { 
                    if ((scanner.la()->id == ps20_token::C9)) {
                      consumeToken(ps20_token::C9);
                      {t.reg = c9Register;}

                    } else { 
                      if ((scanner.la()->id == ps20_token::C10)) {
                        consumeToken(ps20_token::C10);
                        {t.reg = c10Register;}

                      } else { 
                        if ((scanner.la()->id == ps20_token::C11)) {
                          consumeToken(ps20_token::C11);
                          {t.reg = c11Register;}

                        } else { 
                          if ((scanner.la()->id == ps20_token::C12)) {
                            consumeToken(ps20_token::C12);
                            {t.reg = c12Register;}

                          } else { 
                            if ((scanner.la()->id == ps20_token::C13)) {
                              consumeToken(ps20_token::C13);
                              {t.reg = c13Register;}

                            } else { 
                              if ((scanner.la()->id == ps20_token::C14)) {
                                consumeToken(ps20_token::C14);
                                {t.reg = c14Register;}

                              } else { 
                                if ((scanner.la()->id == ps20_token::C15)) {
                                  consumeToken(ps20_token::C15);
                                  {t.reg = c15Register;}

                                } else { 
                                  if ((scanner.la()->id == ps20_token::C16)) {
                                    consumeToken(ps20_token::C16);
                                    {t.reg = c16Register;}

                                  } else { 
                                    if ((scanner.la()->id == ps20_token::C17)) {
                                      consumeToken(ps20_token::C17);
                                      {t.reg = c17Register;}

                                    } else { 
                                      if ((scanner.la()->id == ps20_token::C18)) {
                                        consumeToken(ps20_token::C18);
                                        {t.reg = c18Register;}

                                      } else { 
                                        if ((scanner.la()->id == ps20_token::C19)) {
                                          consumeToken(ps20_token::C19);
                                          {t.reg = c19Register;}

                                        } else { 
                                          if ((scanner.la()->id == ps20_token::C20)) {
                                            consumeToken(ps20_token::C20);
                                            {t.reg = c20Register;}

                                          } else { 
                                            if ((scanner.la()->id == ps20_token::C21)) {
                                              consumeToken(ps20_token::C21);
                                              {t.reg = c21Register;}

                                            } else { 
                                              if ((scanner.la()->id == ps20_token::C22)) {
                                                consumeToken(ps20_token::C22);
                                                {t.reg = c22Register;}

                                              } else { 
                                                if ((scanner.la()->id == ps20_token::C23)) {
                                                  consumeToken(ps20_token::C23);
                                                  {t.reg = c23Register;}

                                                } else { 
                                                  if ((scanner.la()->id == ps20_token::C24)) {
                                                    consumeToken(ps20_token::C24);
                                                    {t.reg = c24Register;}

                                                  } else { 
                                                    if ((scanner.la()->id == ps20_token::C25)) {
                                                      consumeToken(ps20_token::C25);
                                                      {t.reg = c25Register;}

                                                    } else { 
                                                      if ((scanner.la()->id == ps20_token::C26)) {
                                                        consumeToken(ps20_token::C26);
                                                        {t.reg = c26Register;}

                                                      } else { 
                                                        if ((scanner.la()->id == ps20_token::C27)) {
                                                          consumeToken(ps20_token::C27);
                                                          {t.reg = c27Register;}

                                                        } else { 
                                                          if ((scanner.la()->id == ps20_token::C28)) {
                                                            consumeToken(ps20_token::C28);
                                                            {t.reg = c28Register;}

                                                          } else { 
                                                            if ((scanner.la()->id == ps20_token::C29)) {
                                                              consumeToken(ps20_token::C29);
                                                              {t.reg = c29Register;}

                                                            } else { 
                                                              if ((scanner.la()->id == ps20_token::C30)) {
                                                                consumeToken(ps20_token::C30);
                                                                {t.reg = c30Register;}

                                                              } else { 
                                                                consumeToken(ps20_token::C31);
                                                                {t.reg = c31Register;}

                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


void swShader::ps20_parser::inputTextureCoordinateRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::T0)) {
    consumeToken(ps20_token::T0);
    {t.reg = t0Register;}

  } else { 
    if ((scanner.la()->id == ps20_token::T1)) {
      consumeToken(ps20_token::T1);
      {t.reg = t1Register;}

    } else { 
      if ((scanner.la()->id == ps20_token::T2)) {
        consumeToken(ps20_token::T2);
        {t.reg = t2Register;}

      } else { 
        if ((scanner.la()->id == ps20_token::T3)) {
          consumeToken(ps20_token::T3);
          {t.reg = t3Register;}

        } else { 
          if ((scanner.la()->id == ps20_token::T4)) {
            consumeToken(ps20_token::T4);
            {t.reg = t4Register;}

          } else { 
            if ((scanner.la()->id == ps20_token::T5)) {
              consumeToken(ps20_token::T5);
              {t.reg = t5Register;}

            } else { 
              if ((scanner.la()->id == ps20_token::T6)) {
                consumeToken(ps20_token::T6);
                {t.reg = t6Register;}

              } else { 
                consumeToken(ps20_token::T7);
                {t.reg = t7Register;}

              }
            }
          }
        }
      }
    }
  }
  if (__la_4_(1000000000)) {
    writeMask();
  } else { 
     /* lambda */
  }
}


void swShader::ps20_parser::samplerRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::S0)) {
    consumeToken(ps20_token::S0);
    {t.reg = s0Register;}

  } else { 
    if ((scanner.la()->id == ps20_token::S1)) {
      consumeToken(ps20_token::S1);
      {t.reg = s1Register;}

    } else { 
      if ((scanner.la()->id == ps20_token::S2)) {
        consumeToken(ps20_token::S2);
        {t.reg = s2Register;}

      } else { 
        if ((scanner.la()->id == ps20_token::S3)) {
          consumeToken(ps20_token::S3);
          {t.reg = s3Register;}

        } else { 
          if ((scanner.la()->id == ps20_token::S4)) {
            consumeToken(ps20_token::S4);
            {t.reg = s4Register;}

          } else { 
            if ((scanner.la()->id == ps20_token::S5)) {
              consumeToken(ps20_token::S5);
              {t.reg = s5Register;}

            } else { 
              if ((scanner.la()->id == ps20_token::S6)) {
                consumeToken(ps20_token::S6);
                {t.reg = s6Register;}

              } else { 
                if ((scanner.la()->id == ps20_token::S7)) {
                  consumeToken(ps20_token::S7);
                  {t.reg = s7Register;}

                } else { 
                  if ((scanner.la()->id == ps20_token::S8)) {
                    consumeToken(ps20_token::S8);
                    {t.reg = s8Register;}

                  } else { 
                    if ((scanner.la()->id == ps20_token::S9)) {
                      consumeToken(ps20_token::S9);
                      {t.reg = s9Register;}

                    } else { 
                      if ((scanner.la()->id == ps20_token::S10)) {
                        consumeToken(ps20_token::S10);
                        {t.reg = s10Register;}

                      } else { 
                        if ((scanner.la()->id == ps20_token::S11)) {
                          consumeToken(ps20_token::S11);
                          {t.reg = s11Register;}

                        } else { 
                          if ((scanner.la()->id == ps20_token::S12)) {
                            consumeToken(ps20_token::S12);
                            {t.reg = s12Register;}

                          } else { 
                            if ((scanner.la()->id == ps20_token::S13)) {
                              consumeToken(ps20_token::S13);
                              {t.reg = s13Register;}

                            } else { 
                              if ((scanner.la()->id == ps20_token::S14)) {
                                consumeToken(ps20_token::S14);
                                {t.reg = s14Register;}

                              } else { 
                                consumeToken(ps20_token::S15);
                                {t.reg = s15Register;}

                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


void swShader::ps20_parser::temporaryRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::R0)) {
    consumeToken(ps20_token::R0);
    {t.reg = r0Register;}

  } else { 
    if ((scanner.la()->id == ps20_token::R1)) {
      consumeToken(ps20_token::R1);
      {t.reg = r1Register;}

    } else { 
      if ((scanner.la()->id == ps20_token::R2)) {
        consumeToken(ps20_token::R2);
        {t.reg = r2Register;}

      } else { 
        if ((scanner.la()->id == ps20_token::R3)) {
          consumeToken(ps20_token::R3);
          {t.reg = r3Register;}

        } else { 
          if ((scanner.la()->id == ps20_token::R4)) {
            consumeToken(ps20_token::R4);
            {t.reg = r4Register;}

          } else { 
            if ((scanner.la()->id == ps20_token::R5)) {
              consumeToken(ps20_token::R5);
              {t.reg = r5Register;}

            } else { 
              if ((scanner.la()->id == ps20_token::R6)) {
                consumeToken(ps20_token::R6);
                {t.reg = r6Register;}

              } else { 
                if ((scanner.la()->id == ps20_token::R7)) {
                  consumeToken(ps20_token::R7);
                  {t.reg = r7Register;}

                } else { 
                  if ((scanner.la()->id == ps20_token::R8)) {
                    consumeToken(ps20_token::R8);
                    {t.reg = r8Register;}

                  } else { 
                    if ((scanner.la()->id == ps20_token::R9)) {
                      consumeToken(ps20_token::R9);
                      {t.reg = r9Register;}

                    } else { 
                      if ((scanner.la()->id == ps20_token::R10)) {
                        consumeToken(ps20_token::R10);
                        {t.reg = r10Register;}

                      } else { 
                        consumeToken(ps20_token::R11);
                        {t.reg = r11Register;}

                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


void swShader::ps20_parser::outputColorRegister ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == ps20_token::O_C0)) {
    consumeToken(ps20_token::O_C0);
    {t.reg = oC0Register;}

  } else { 
    if ((scanner.la()->id == ps20_token::O_C1)) {
      consumeToken(ps20_token::O_C1);
      {t.reg = oC1Register;}

    } else { 
      if ((scanner.la()->id == ps20_token::O_C2)) {
        consumeToken(ps20_token::O_C2);
        {t.reg = oC2Register;}

      } else { 
        consumeToken(ps20_token::O_C3);
        {t.reg = oC3Register;}

      }
    }
  }
}


void swShader::ps20_parser::outputDepthRegister ()
     throw (ScanException, ParseException)
{
  consumeToken(ps20_token::O_DEPTH);
  {t.reg = oDepthRegister;}

}


bool swShader::ps20_parser::__la_main_ () throw (ScanException)
{
  while (__la_0_(1000000000)) {
    if (!__la_instruction_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!laConsumeToken(ps20_token::EOL)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    while ((scanner.la()->id == ps20_token::EOL)) {
      if (!laConsumeToken(ps20_token::EOL)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
  }
  if ((scanner.la()->id == ps20_token::PS_2_0) || (scanner.la()->id == ps20_token::DCL) || (scanner.la()->id == ps20_token::DCL_2D) || (scanner.la()->id == ps20_token::DCL_CUBE) || (scanner.la()->id == ps20_token::DCL_VOLUME) || (scanner.la()->id == ps20_token::DEF) || (scanner.la()->id == ps20_token::ABS) || (scanner.la()->id == ps20_token::ADD) || (scanner.la()->id == ps20_token::CMP) || (scanner.la()->id == ps20_token::CRS) || (scanner.la()->id == ps20_token::DP2ADD) || (scanner.la()->id == ps20_token::DP3) || (scanner.la()->id == ps20_token::DP4) || (scanner.la()->id == ps20_token::EXP) || (scanner.la()->id == ps20_token::FRC) || (scanner.la()->id == ps20_token::LOG) || (scanner.la()->id == ps20_token::LRP) || (scanner.la()->id == ps20_token::M3X2) || (scanner.la()->id == ps20_token::M3X3) || (scanner.la()->id == ps20_token::M3X4) || (scanner.la()->id == ps20_token::M4X3) || (scanner.la()->id == ps20_token::M4X4) || (scanner.la()->id == ps20_token::MAD) || (scanner.la()->id == ps20_token::MAX) || (scanner.la()->id == ps20_token::MIN) || (scanner.la()->id == ps20_token::MOV) || (scanner.la()->id == ps20_token::MUL) || (scanner.la()->id == ps20_token::NOP) || (scanner.la()->id == ps20_token::NRM) || (scanner.la()->id == ps20_token::POW) || (scanner.la()->id == ps20_token::RCP) || (scanner.la()->id == ps20_token::RSQ) || (scanner.la()->id == ps20_token::SINCOS) || (scanner.la()->id == ps20_token::SUB) || (scanner.la()->id == ps20_token::TEXKILL) || (scanner.la()->id == ps20_token::TEXLD) || (scanner.la()->id == ps20_token::TEXLDB) || (scanner.la()->id == ps20_token::TEXLDP)) {
    if (!__la_instruction_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_0_ (int depth) throw (ScanException)
{
  int _laSave = _la;
  _la = depth;
  scanner.setMarker();
  
  if (!__la_instruction_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::EOL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == ps20_token::EOL)) {
    if (!laConsumeToken(ps20_token::EOL)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  goto __lookahead_succeed_;
  
__lookahead_fail_:
  _la = _laSave;
  scanner.rewindToMarker();
  return false;

__lookahead_succeed_:
  _la = _laSave;
  scanner.rewindToMarker();
  return true;
}


bool swShader::ps20_parser::__la_instruction_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::ABS)) {
    if (!__la_absInstruction_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::ADD)) {
      if (!__la_addInstruction_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::CMP)) {
        if (!__la_cmpInstruction_()) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::CRS)) {
          if (!__la_crsInstruction_()) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::DCL)) {
            if (!__la_dclInstruction_()) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if ((scanner.la()->id == ps20_token::DCL_2D)) {
              if (!__la_dcl_2dInstruction_()) goto __lookahead_fail_;
              if (_la == 0) goto __lookahead_succeed_;
            } else { 
              if ((scanner.la()->id == ps20_token::DCL_CUBE)) {
                if (!__la_dcl_cubeInstruction_()) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              } else { 
                if ((scanner.la()->id == ps20_token::DCL_VOLUME)) {
                  if (!__la_dcl_volumeInstruction_()) goto __lookahead_fail_;
                  if (_la == 0) goto __lookahead_succeed_;
                } else { 
                  if ((scanner.la()->id == ps20_token::DEF)) {
                    if (!__la_defInstruction_()) goto __lookahead_fail_;
                    if (_la == 0) goto __lookahead_succeed_;
                  } else { 
                    if ((scanner.la()->id == ps20_token::DP2ADD)) {
                      if (!__la_dp2addInstruction_()) goto __lookahead_fail_;
                      if (_la == 0) goto __lookahead_succeed_;
                    } else { 
                      if ((scanner.la()->id == ps20_token::DP3)) {
                        if (!__la_dp3Instruction_()) goto __lookahead_fail_;
                        if (_la == 0) goto __lookahead_succeed_;
                      } else { 
                        if ((scanner.la()->id == ps20_token::DP4)) {
                          if (!__la_dp4Instruction_()) goto __lookahead_fail_;
                          if (_la == 0) goto __lookahead_succeed_;
                        } else { 
                          if ((scanner.la()->id == ps20_token::EXP)) {
                            if (!__la_expInstruction_()) goto __lookahead_fail_;
                            if (_la == 0) goto __lookahead_succeed_;
                          } else { 
                            if ((scanner.la()->id == ps20_token::FRC)) {
                              if (!__la_frcInstruction_()) goto __lookahead_fail_;
                              if (_la == 0) goto __lookahead_succeed_;
                            } else { 
                              if ((scanner.la()->id == ps20_token::LOG)) {
                                if (!__la_logInstruction_()) goto __lookahead_fail_;
                                if (_la == 0) goto __lookahead_succeed_;
                              } else { 
                                if ((scanner.la()->id == ps20_token::LRP)) {
                                  if (!__la_lrpInstruction_()) goto __lookahead_fail_;
                                  if (_la == 0) goto __lookahead_succeed_;
                                } else { 
                                  if ((scanner.la()->id == ps20_token::M3X2)) {
                                    if (!__la_m3x2Instruction_()) goto __lookahead_fail_;
                                    if (_la == 0) goto __lookahead_succeed_;
                                  } else { 
                                    if ((scanner.la()->id == ps20_token::M3X3)) {
                                      if (!__la_m3x3Instruction_()) goto __lookahead_fail_;
                                      if (_la == 0) goto __lookahead_succeed_;
                                    } else { 
                                      if ((scanner.la()->id == ps20_token::M3X4)) {
                                        if (!__la_m3x4Instruction_()) goto __lookahead_fail_;
                                        if (_la == 0) goto __lookahead_succeed_;
                                      } else { 
                                        if ((scanner.la()->id == ps20_token::M4X3)) {
                                          if (!__la_m4x3Instruction_()) goto __lookahead_fail_;
                                          if (_la == 0) goto __lookahead_succeed_;
                                        } else { 
                                          if ((scanner.la()->id == ps20_token::M4X4)) {
                                            if (!__la_m4x4Instruction_()) goto __lookahead_fail_;
                                            if (_la == 0) goto __lookahead_succeed_;
                                          } else { 
                                            if ((scanner.la()->id == ps20_token::MAD)) {
                                              if (!__la_madInstruction_()) goto __lookahead_fail_;
                                              if (_la == 0) goto __lookahead_succeed_;
                                            } else { 
                                              if ((scanner.la()->id == ps20_token::MAX)) {
                                                if (!__la_maxInstruction_()) goto __lookahead_fail_;
                                                if (_la == 0) goto __lookahead_succeed_;
                                              } else { 
                                                if ((scanner.la()->id == ps20_token::MIN)) {
                                                  if (!__la_minInstruction_()) goto __lookahead_fail_;
                                                  if (_la == 0) goto __lookahead_succeed_;
                                                } else { 
                                                  if ((scanner.la()->id == ps20_token::MOV)) {
                                                    if (!__la_movInstruction_()) goto __lookahead_fail_;
                                                    if (_la == 0) goto __lookahead_succeed_;
                                                  } else { 
                                                    if ((scanner.la()->id == ps20_token::MUL)) {
                                                      if (!__la_mulInstruction_()) goto __lookahead_fail_;
                                                      if (_la == 0) goto __lookahead_succeed_;
                                                    } else { 
                                                      if ((scanner.la()->id == ps20_token::NOP)) {
                                                        if (!__la_nopInstruction_()) goto __lookahead_fail_;
                                                        if (_la == 0) goto __lookahead_succeed_;
                                                      } else { 
                                                        if ((scanner.la()->id == ps20_token::NRM)) {
                                                          if (!__la_nrmInstruction_()) goto __lookahead_fail_;
                                                          if (_la == 0) goto __lookahead_succeed_;
                                                        } else { 
                                                          if ((scanner.la()->id == ps20_token::POW)) {
                                                            if (!__la_powInstruction_()) goto __lookahead_fail_;
                                                            if (_la == 0) goto __lookahead_succeed_;
                                                          } else { 
                                                            if ((scanner.la()->id == ps20_token::PS_2_0)) {
                                                              if (!__la_psInstruction_()) goto __lookahead_fail_;
                                                              if (_la == 0) goto __lookahead_succeed_;
                                                            } else { 
                                                              if ((scanner.la()->id == ps20_token::RCP)) {
                                                                if (!__la_rcpInstruction_()) goto __lookahead_fail_;
                                                                if (_la == 0) goto __lookahead_succeed_;
                                                              } else { 
                                                                if ((scanner.la()->id == ps20_token::RSQ)) {
                                                                  if (!__la_rsqInstruction_()) goto __lookahead_fail_;
                                                                  if (_la == 0) goto __lookahead_succeed_;
                                                                } else { 
                                                                  if ((scanner.la()->id == ps20_token::SINCOS)) {
                                                                    if (!__la_sincosInstruction_()) goto __lookahead_fail_;
                                                                    if (_la == 0) goto __lookahead_succeed_;
                                                                  } else { 
                                                                    if ((scanner.la()->id == ps20_token::SUB)) {
                                                                      if (!__la_subInstruction_()) goto __lookahead_fail_;
                                                                      if (_la == 0) goto __lookahead_succeed_;
                                                                    } else { 
                                                                      if ((scanner.la()->id == ps20_token::TEXKILL)) {
                                                                        if (!__la_texkillInstruction_()) goto __lookahead_fail_;
                                                                        if (_la == 0) goto __lookahead_succeed_;
                                                                      } else { 
                                                                        if ((scanner.la()->id == ps20_token::TEXLD)) {
                                                                          if (!__la_texldInstruction_()) goto __lookahead_fail_;
                                                                          if (_la == 0) goto __lookahead_succeed_;
                                                                        } else { 
                                                                          if ((scanner.la()->id == ps20_token::TEXLDB)) {
                                                                            if (!__la_texldbInstruction_()) goto __lookahead_fail_;
                                                                            if (_la == 0) goto __lookahead_succeed_;
                                                                          } else { 
                                                                            if (!__la_texldpInstruction_()) goto __lookahead_fail_;
                                                                            if (_la == 0) goto __lookahead_succeed_;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_psInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::PS_2_0)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dclInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DCL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dest_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dcl_2dInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DCL_2D)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_sn_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dcl_cubeInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DCL_CUBE)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_sn_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dcl_volumeInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DCL_VOLUME)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_sn_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_defInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DEF)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_cn_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_fValue1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_fValue2_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_fValue3_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_fValue4_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_absInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::ABS)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_addInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::ADD)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_cmpInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::CMP)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src2_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_crsInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::CRS)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dp2addInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DP2ADD)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src2_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dp3Instruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DP3)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dp4Instruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::DP4)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_expInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::EXP)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_frcInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::FRC)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_logInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::LOG)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_lrpInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::LRP)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src2_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_m3x2Instruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::M3X2)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_m3x3Instruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::M3X3)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_m3x4Instruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::M3X4)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_m4x3Instruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::M4X3)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_m4x4Instruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::M4X4)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_madInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::MAD)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src2_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_maxInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::MAX)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_minInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::MIN)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_movInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::MOV)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == ps20_token::R0) || (scanner.la()->id == ps20_token::R1) || (scanner.la()->id == ps20_token::R2) || (scanner.la()->id == ps20_token::R3) || (scanner.la()->id == ps20_token::R4) || (scanner.la()->id == ps20_token::R5) || (scanner.la()->id == ps20_token::R6) || (scanner.la()->id == ps20_token::R7) || (scanner.la()->id == ps20_token::R8) || (scanner.la()->id == ps20_token::R9) || (scanner.la()->id == ps20_token::R10) || (scanner.la()->id == ps20_token::R11)) {
    if (!__la_dst_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!__la_outputRegister_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_mulInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::MUL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_nopInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::NOP)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_nrmInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::NRM)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_powInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::POW)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_rcpInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::RCP)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_rsqInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::RSQ)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_sincosInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::SINCOS)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src2_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_subInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::SUB)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_instructionModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_texkillInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::TEXKILL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_texldInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::TEXLD)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_texldbInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::TEXLDB)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_texldpInstruction_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::TEXLDP)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_dst_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src0_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(ps20_token::COMMA)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_src1_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_instructionModifier_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::_SAT) || (scanner.la()->id == ps20_token::_PP)) {
    if ((scanner.la()->id == ps20_token::_SAT)) {
      if (!laConsumeToken(ps20_token::_SAT)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if (!laConsumeToken(ps20_token::_PP)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dst_ () throw (ScanException)
{
  if (!__la_temporaryRegister_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_writeMask_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_dest_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::V0) || (scanner.la()->id == ps20_token::V1)) {
    if (!__la_colorRegister_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!__la_inputTextureCoordinateRegister_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_sn_ () throw (ScanException)
{
  if (!__la_samplerRegister_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_cn_ () throw (ScanException)
{
  if (!__la_constantFloatRegister_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_fValue1_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::REAL)) {
    if (!laConsumeToken(ps20_token::REAL)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!laConsumeToken(ps20_token::INTEGER)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_fValue2_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::REAL)) {
    if (!laConsumeToken(ps20_token::REAL)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!laConsumeToken(ps20_token::INTEGER)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_fValue3_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::REAL)) {
    if (!laConsumeToken(ps20_token::REAL)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!laConsumeToken(ps20_token::INTEGER)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_fValue4_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::REAL)) {
    if (!laConsumeToken(ps20_token::REAL)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!laConsumeToken(ps20_token::INTEGER)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_src_ () throw (ScanException)
{
  if (!__la_sourceModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_inputRegister_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_sourceSwizzle_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_src0_ () throw (ScanException)
{
  if (!__la_sourceModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_inputRegister_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_sourceSwizzle_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_src1_ () throw (ScanException)
{
  if (!__la_sourceModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_inputRegister_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_sourceSwizzle_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_src2_ () throw (ScanException)
{
  if (!__la_sourceModifier_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_inputRegister_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_sourceSwizzle_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_outputRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::O_C0) || (scanner.la()->id == ps20_token::O_C1) || (scanner.la()->id == ps20_token::O_C2) || (scanner.la()->id == ps20_token::O_C3)) {
    if (!__la_outputColorRegister_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!__la_outputDepthRegister_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_inputRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::V0) || (scanner.la()->id == ps20_token::V1)) {
    if (!__la_colorRegister_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::C0) || (scanner.la()->id == ps20_token::C1) || (scanner.la()->id == ps20_token::C2) || (scanner.la()->id == ps20_token::C3) || (scanner.la()->id == ps20_token::C4) || (scanner.la()->id == ps20_token::C5) || (scanner.la()->id == ps20_token::C6) || (scanner.la()->id == ps20_token::C7) || (scanner.la()->id == ps20_token::C8) || (scanner.la()->id == ps20_token::C9) || (scanner.la()->id == ps20_token::C10) || (scanner.la()->id == ps20_token::C11) || (scanner.la()->id == ps20_token::C12) || (scanner.la()->id == ps20_token::C13) || (scanner.la()->id == ps20_token::C14) || (scanner.la()->id == ps20_token::C15) || (scanner.la()->id == ps20_token::C16) || (scanner.la()->id == ps20_token::C17) || (scanner.la()->id == ps20_token::C18) || (scanner.la()->id == ps20_token::C19) || (scanner.la()->id == ps20_token::C20) || (scanner.la()->id == ps20_token::C21) || (scanner.la()->id == ps20_token::C22) || (scanner.la()->id == ps20_token::C23) || (scanner.la()->id == ps20_token::C24) || (scanner.la()->id == ps20_token::C25) || (scanner.la()->id == ps20_token::C26) || (scanner.la()->id == ps20_token::C27) || (scanner.la()->id == ps20_token::C28) || (scanner.la()->id == ps20_token::C29) || (scanner.la()->id == ps20_token::C30) || (scanner.la()->id == ps20_token::C31)) {
      if (!__la_constantFloatRegister_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::T0) || (scanner.la()->id == ps20_token::T1) || (scanner.la()->id == ps20_token::T2) || (scanner.la()->id == ps20_token::T3) || (scanner.la()->id == ps20_token::T4) || (scanner.la()->id == ps20_token::T5) || (scanner.la()->id == ps20_token::T6) || (scanner.la()->id == ps20_token::T7)) {
        if (!__la_inputTextureCoordinateRegister_()) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::S0) || (scanner.la()->id == ps20_token::S1) || (scanner.la()->id == ps20_token::S2) || (scanner.la()->id == ps20_token::S3) || (scanner.la()->id == ps20_token::S4) || (scanner.la()->id == ps20_token::S5) || (scanner.la()->id == ps20_token::S6) || (scanner.la()->id == ps20_token::S7) || (scanner.la()->id == ps20_token::S8) || (scanner.la()->id == ps20_token::S9) || (scanner.la()->id == ps20_token::S10) || (scanner.la()->id == ps20_token::S11) || (scanner.la()->id == ps20_token::S12) || (scanner.la()->id == ps20_token::S13) || (scanner.la()->id == ps20_token::S14) || (scanner.la()->id == ps20_token::S15)) {
          if (!__la_samplerRegister_()) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if (!__la_temporaryRegister_()) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_sourceModifier_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::MINUS)) {
    if (!laConsumeToken(ps20_token::MINUS)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_writeMask_ () throw (ScanException)
{
  if (__la_1_(1000000000)) {
    if (!laConsumeToken(ps20_token::DOT)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if ((scanner.la()->id == ps20_token::X)) {
      if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if ((scanner.la()->id == ps20_token::Y)) {
        if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
         /* lambda */
      }
      if ((scanner.la()->id == ps20_token::Z)) {
        if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
         /* lambda */
      }
      if ((scanner.la()->id == ps20_token::W)) {
        if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
         /* lambda */
      }
    } else { 
      if ((scanner.la()->id == ps20_token::Y)) {
        if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
        if ((scanner.la()->id == ps20_token::Z)) {
          if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
           /* lambda */
        }
        if ((scanner.la()->id == ps20_token::W)) {
          if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
           /* lambda */
        }
      } else { 
        if ((scanner.la()->id == ps20_token::Z)) {
          if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
          if ((scanner.la()->id == ps20_token::W)) {
            if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
             /* lambda */
          }
        } else { 
          if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        }
      }
    }
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_1_ (int depth) throw (ScanException)
{
  int _laSave = _la;
  _la = depth;
  scanner.setMarker();
  
  if (!laConsumeToken(ps20_token::DOT)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == ps20_token::X)) {
    if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if ((scanner.la()->id == ps20_token::Y)) {
      if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
       /* lambda */
    }
    if ((scanner.la()->id == ps20_token::Z)) {
      if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
       /* lambda */
    }
    if ((scanner.la()->id == ps20_token::W)) {
      if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
       /* lambda */
    }
  } else { 
    if ((scanner.la()->id == ps20_token::Y)) {
      if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if ((scanner.la()->id == ps20_token::Z)) {
        if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
         /* lambda */
      }
      if ((scanner.la()->id == ps20_token::W)) {
        if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
         /* lambda */
      }
    } else { 
      if ((scanner.la()->id == ps20_token::Z)) {
        if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
        if ((scanner.la()->id == ps20_token::W)) {
          if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
           /* lambda */
        }
      } else { 
        if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      }
    }
  }
  goto __lookahead_succeed_;
  
__lookahead_fail_:
  _la = _laSave;
  scanner.rewindToMarker();
  return false;

__lookahead_succeed_:
  _la = _laSave;
  scanner.rewindToMarker();
  return true;
}


bool swShader::ps20_parser::__la_sourceSwizzle_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::DOT)) {
    if (!laConsumeToken(ps20_token::DOT)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if ((scanner.la()->id == ps20_token::X)) {
      if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::Y)) {
        if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::Z)) {
          if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        }
      }
    }
    if (__la_2_(1000000000)) {
      if ((scanner.la()->id == ps20_token::X)) {
        if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::Y)) {
          if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::Z)) {
            if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          }
        }
      }
    } else { 
       /* lambda */
    }
    if (__la_3_(1000000000)) {
      if ((scanner.la()->id == ps20_token::X)) {
        if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::Y)) {
          if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::Z)) {
            if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          }
        }
      }
    } else { 
       /* lambda */
    }
    if ((scanner.la()->id == ps20_token::X) || (scanner.la()->id == ps20_token::Y) || (scanner.la()->id == ps20_token::Z) || (scanner.la()->id == ps20_token::W)) {
      if ((scanner.la()->id == ps20_token::X)) {
        if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::Y)) {
          if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::Z)) {
            if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          }
        }
      }
    } else { 
       /* lambda */
    }
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_2_ (int depth) throw (ScanException)
{
  int _laSave = _la;
  _la = depth;
  scanner.setMarker();
  
  if ((scanner.la()->id == ps20_token::X)) {
    if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::Y)) {
      if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::Z)) {
        if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      }
    }
  }
  goto __lookahead_succeed_;
  
__lookahead_fail_:
  _la = _laSave;
  scanner.rewindToMarker();
  return false;

__lookahead_succeed_:
  _la = _laSave;
  scanner.rewindToMarker();
  return true;
}


bool swShader::ps20_parser::__la_3_ (int depth) throw (ScanException)
{
  int _laSave = _la;
  _la = depth;
  scanner.setMarker();
  
  if ((scanner.la()->id == ps20_token::X)) {
    if (!laConsumeToken(ps20_token::X)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::Y)) {
      if (!laConsumeToken(ps20_token::Y)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::Z)) {
        if (!laConsumeToken(ps20_token::Z)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if (!laConsumeToken(ps20_token::W)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      }
    }
  }
  goto __lookahead_succeed_;
  
__lookahead_fail_:
  _la = _laSave;
  scanner.rewindToMarker();
  return false;

__lookahead_succeed_:
  _la = _laSave;
  scanner.rewindToMarker();
  return true;
}


bool swShader::ps20_parser::__la_colorRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::V0)) {
    if (!laConsumeToken(ps20_token::V0)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!laConsumeToken(ps20_token::V1)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_constantFloatRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::C0)) {
    if (!laConsumeToken(ps20_token::C0)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::C1)) {
      if (!laConsumeToken(ps20_token::C1)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::C2)) {
        if (!laConsumeToken(ps20_token::C2)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::C3)) {
          if (!laConsumeToken(ps20_token::C3)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::C4)) {
            if (!laConsumeToken(ps20_token::C4)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if ((scanner.la()->id == ps20_token::C5)) {
              if (!laConsumeToken(ps20_token::C5)) goto __lookahead_fail_;
              if (_la == 0) goto __lookahead_succeed_;
            } else { 
              if ((scanner.la()->id == ps20_token::C6)) {
                if (!laConsumeToken(ps20_token::C6)) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              } else { 
                if ((scanner.la()->id == ps20_token::C7)) {
                  if (!laConsumeToken(ps20_token::C7)) goto __lookahead_fail_;
                  if (_la == 0) goto __lookahead_succeed_;
                } else { 
                  if ((scanner.la()->id == ps20_token::C8)) {
                    if (!laConsumeToken(ps20_token::C8)) goto __lookahead_fail_;
                    if (_la == 0) goto __lookahead_succeed_;
                  } else { 
                    if ((scanner.la()->id == ps20_token::C9)) {
                      if (!laConsumeToken(ps20_token::C9)) goto __lookahead_fail_;
                      if (_la == 0) goto __lookahead_succeed_;
                    } else { 
                      if ((scanner.la()->id == ps20_token::C10)) {
                        if (!laConsumeToken(ps20_token::C10)) goto __lookahead_fail_;
                        if (_la == 0) goto __lookahead_succeed_;
                      } else { 
                        if ((scanner.la()->id == ps20_token::C11)) {
                          if (!laConsumeToken(ps20_token::C11)) goto __lookahead_fail_;
                          if (_la == 0) goto __lookahead_succeed_;
                        } else { 
                          if ((scanner.la()->id == ps20_token::C12)) {
                            if (!laConsumeToken(ps20_token::C12)) goto __lookahead_fail_;
                            if (_la == 0) goto __lookahead_succeed_;
                          } else { 
                            if ((scanner.la()->id == ps20_token::C13)) {
                              if (!laConsumeToken(ps20_token::C13)) goto __lookahead_fail_;
                              if (_la == 0) goto __lookahead_succeed_;
                            } else { 
                              if ((scanner.la()->id == ps20_token::C14)) {
                                if (!laConsumeToken(ps20_token::C14)) goto __lookahead_fail_;
                                if (_la == 0) goto __lookahead_succeed_;
                              } else { 
                                if ((scanner.la()->id == ps20_token::C15)) {
                                  if (!laConsumeToken(ps20_token::C15)) goto __lookahead_fail_;
                                  if (_la == 0) goto __lookahead_succeed_;
                                } else { 
                                  if ((scanner.la()->id == ps20_token::C16)) {
                                    if (!laConsumeToken(ps20_token::C16)) goto __lookahead_fail_;
                                    if (_la == 0) goto __lookahead_succeed_;
                                  } else { 
                                    if ((scanner.la()->id == ps20_token::C17)) {
                                      if (!laConsumeToken(ps20_token::C17)) goto __lookahead_fail_;
                                      if (_la == 0) goto __lookahead_succeed_;
                                    } else { 
                                      if ((scanner.la()->id == ps20_token::C18)) {
                                        if (!laConsumeToken(ps20_token::C18)) goto __lookahead_fail_;
                                        if (_la == 0) goto __lookahead_succeed_;
                                      } else { 
                                        if ((scanner.la()->id == ps20_token::C19)) {
                                          if (!laConsumeToken(ps20_token::C19)) goto __lookahead_fail_;
                                          if (_la == 0) goto __lookahead_succeed_;
                                        } else { 
                                          if ((scanner.la()->id == ps20_token::C20)) {
                                            if (!laConsumeToken(ps20_token::C20)) goto __lookahead_fail_;
                                            if (_la == 0) goto __lookahead_succeed_;
                                          } else { 
                                            if ((scanner.la()->id == ps20_token::C21)) {
                                              if (!laConsumeToken(ps20_token::C21)) goto __lookahead_fail_;
                                              if (_la == 0) goto __lookahead_succeed_;
                                            } else { 
                                              if ((scanner.la()->id == ps20_token::C22)) {
                                                if (!laConsumeToken(ps20_token::C22)) goto __lookahead_fail_;
                                                if (_la == 0) goto __lookahead_succeed_;
                                              } else { 
                                                if ((scanner.la()->id == ps20_token::C23)) {
                                                  if (!laConsumeToken(ps20_token::C23)) goto __lookahead_fail_;
                                                  if (_la == 0) goto __lookahead_succeed_;
                                                } else { 
                                                  if ((scanner.la()->id == ps20_token::C24)) {
                                                    if (!laConsumeToken(ps20_token::C24)) goto __lookahead_fail_;
                                                    if (_la == 0) goto __lookahead_succeed_;
                                                  } else { 
                                                    if ((scanner.la()->id == ps20_token::C25)) {
                                                      if (!laConsumeToken(ps20_token::C25)) goto __lookahead_fail_;
                                                      if (_la == 0) goto __lookahead_succeed_;
                                                    } else { 
                                                      if ((scanner.la()->id == ps20_token::C26)) {
                                                        if (!laConsumeToken(ps20_token::C26)) goto __lookahead_fail_;
                                                        if (_la == 0) goto __lookahead_succeed_;
                                                      } else { 
                                                        if ((scanner.la()->id == ps20_token::C27)) {
                                                          if (!laConsumeToken(ps20_token::C27)) goto __lookahead_fail_;
                                                          if (_la == 0) goto __lookahead_succeed_;
                                                        } else { 
                                                          if ((scanner.la()->id == ps20_token::C28)) {
                                                            if (!laConsumeToken(ps20_token::C28)) goto __lookahead_fail_;
                                                            if (_la == 0) goto __lookahead_succeed_;
                                                          } else { 
                                                            if ((scanner.la()->id == ps20_token::C29)) {
                                                              if (!laConsumeToken(ps20_token::C29)) goto __lookahead_fail_;
                                                              if (_la == 0) goto __lookahead_succeed_;
                                                            } else { 
                                                              if ((scanner.la()->id == ps20_token::C30)) {
                                                                if (!laConsumeToken(ps20_token::C30)) goto __lookahead_fail_;
                                                                if (_la == 0) goto __lookahead_succeed_;
                                                              } else { 
                                                                if (!laConsumeToken(ps20_token::C31)) goto __lookahead_fail_;
                                                                if (_la == 0) goto __lookahead_succeed_;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_inputTextureCoordinateRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::T0)) {
    if (!laConsumeToken(ps20_token::T0)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::T1)) {
      if (!laConsumeToken(ps20_token::T1)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::T2)) {
        if (!laConsumeToken(ps20_token::T2)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::T3)) {
          if (!laConsumeToken(ps20_token::T3)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::T4)) {
            if (!laConsumeToken(ps20_token::T4)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if ((scanner.la()->id == ps20_token::T5)) {
              if (!laConsumeToken(ps20_token::T5)) goto __lookahead_fail_;
              if (_la == 0) goto __lookahead_succeed_;
            } else { 
              if ((scanner.la()->id == ps20_token::T6)) {
                if (!laConsumeToken(ps20_token::T6)) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              } else { 
                if (!laConsumeToken(ps20_token::T7)) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              }
            }
          }
        }
      }
    }
  }
  if (__la_4_(1000000000)) {
    if (!__la_writeMask_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_4_ (int depth) throw (ScanException)
{
  int _laSave = _la;
  _la = depth;
  scanner.setMarker();
  
  if (!__la_writeMask_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  goto __lookahead_succeed_;
  
__lookahead_fail_:
  _la = _laSave;
  scanner.rewindToMarker();
  return false;

__lookahead_succeed_:
  _la = _laSave;
  scanner.rewindToMarker();
  return true;
}


bool swShader::ps20_parser::__la_samplerRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::S0)) {
    if (!laConsumeToken(ps20_token::S0)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::S1)) {
      if (!laConsumeToken(ps20_token::S1)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::S2)) {
        if (!laConsumeToken(ps20_token::S2)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::S3)) {
          if (!laConsumeToken(ps20_token::S3)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::S4)) {
            if (!laConsumeToken(ps20_token::S4)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if ((scanner.la()->id == ps20_token::S5)) {
              if (!laConsumeToken(ps20_token::S5)) goto __lookahead_fail_;
              if (_la == 0) goto __lookahead_succeed_;
            } else { 
              if ((scanner.la()->id == ps20_token::S6)) {
                if (!laConsumeToken(ps20_token::S6)) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              } else { 
                if ((scanner.la()->id == ps20_token::S7)) {
                  if (!laConsumeToken(ps20_token::S7)) goto __lookahead_fail_;
                  if (_la == 0) goto __lookahead_succeed_;
                } else { 
                  if ((scanner.la()->id == ps20_token::S8)) {
                    if (!laConsumeToken(ps20_token::S8)) goto __lookahead_fail_;
                    if (_la == 0) goto __lookahead_succeed_;
                  } else { 
                    if ((scanner.la()->id == ps20_token::S9)) {
                      if (!laConsumeToken(ps20_token::S9)) goto __lookahead_fail_;
                      if (_la == 0) goto __lookahead_succeed_;
                    } else { 
                      if ((scanner.la()->id == ps20_token::S10)) {
                        if (!laConsumeToken(ps20_token::S10)) goto __lookahead_fail_;
                        if (_la == 0) goto __lookahead_succeed_;
                      } else { 
                        if ((scanner.la()->id == ps20_token::S11)) {
                          if (!laConsumeToken(ps20_token::S11)) goto __lookahead_fail_;
                          if (_la == 0) goto __lookahead_succeed_;
                        } else { 
                          if ((scanner.la()->id == ps20_token::S12)) {
                            if (!laConsumeToken(ps20_token::S12)) goto __lookahead_fail_;
                            if (_la == 0) goto __lookahead_succeed_;
                          } else { 
                            if ((scanner.la()->id == ps20_token::S13)) {
                              if (!laConsumeToken(ps20_token::S13)) goto __lookahead_fail_;
                              if (_la == 0) goto __lookahead_succeed_;
                            } else { 
                              if ((scanner.la()->id == ps20_token::S14)) {
                                if (!laConsumeToken(ps20_token::S14)) goto __lookahead_fail_;
                                if (_la == 0) goto __lookahead_succeed_;
                              } else { 
                                if (!laConsumeToken(ps20_token::S15)) goto __lookahead_fail_;
                                if (_la == 0) goto __lookahead_succeed_;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_temporaryRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::R0)) {
    if (!laConsumeToken(ps20_token::R0)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::R1)) {
      if (!laConsumeToken(ps20_token::R1)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::R2)) {
        if (!laConsumeToken(ps20_token::R2)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == ps20_token::R3)) {
          if (!laConsumeToken(ps20_token::R3)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == ps20_token::R4)) {
            if (!laConsumeToken(ps20_token::R4)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if ((scanner.la()->id == ps20_token::R5)) {
              if (!laConsumeToken(ps20_token::R5)) goto __lookahead_fail_;
              if (_la == 0) goto __lookahead_succeed_;
            } else { 
              if ((scanner.la()->id == ps20_token::R6)) {
                if (!laConsumeToken(ps20_token::R6)) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              } else { 
                if ((scanner.la()->id == ps20_token::R7)) {
                  if (!laConsumeToken(ps20_token::R7)) goto __lookahead_fail_;
                  if (_la == 0) goto __lookahead_succeed_;
                } else { 
                  if ((scanner.la()->id == ps20_token::R8)) {
                    if (!laConsumeToken(ps20_token::R8)) goto __lookahead_fail_;
                    if (_la == 0) goto __lookahead_succeed_;
                  } else { 
                    if ((scanner.la()->id == ps20_token::R9)) {
                      if (!laConsumeToken(ps20_token::R9)) goto __lookahead_fail_;
                      if (_la == 0) goto __lookahead_succeed_;
                    } else { 
                      if ((scanner.la()->id == ps20_token::R10)) {
                        if (!laConsumeToken(ps20_token::R10)) goto __lookahead_fail_;
                        if (_la == 0) goto __lookahead_succeed_;
                      } else { 
                        if (!laConsumeToken(ps20_token::R11)) goto __lookahead_fail_;
                        if (_la == 0) goto __lookahead_succeed_;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_outputColorRegister_ () throw (ScanException)
{
  if ((scanner.la()->id == ps20_token::O_C0)) {
    if (!laConsumeToken(ps20_token::O_C0)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == ps20_token::O_C1)) {
      if (!laConsumeToken(ps20_token::O_C1)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == ps20_token::O_C2)) {
        if (!laConsumeToken(ps20_token::O_C2)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if (!laConsumeToken(ps20_token::O_C3)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool swShader::ps20_parser::__la_outputDepthRegister_ () throw (ScanException)
{
  if (!laConsumeToken(ps20_token::O_DEPTH)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}





/* End of file. */
